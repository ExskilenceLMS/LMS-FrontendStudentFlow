[
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "In the Kingdom of Codevia, messengers are responsible for delivering royal messages. There are two types of messengers:\n\n• RoyalMessenger: A basic messenger that delivers standard messages.\n• UrgentMessenger: A special messenger who overrides the delivery behaviour to emphasize urgency.\nCreate a base class, RoyalMessenger with a method deliver(message).\nThen create a subclass UrgentMessenger that overrides the deliver(message) method.",
        "Template": "class RoyalMessenger:\n    def deliver(self, message):\n        pass\n\nclass UrgentMessenger(RoyalMessenger):\n    def deliver(self, message):\n        pass\n\n# Example usage\nroyal = RoyalMessenger()\nurgent = UrgentMessenger()\nprint(royal.deliver(\"Your taxes are due.\"))\nprint(urgent.deliver(\"Enemy at the gates!\"))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "royal = RoyalMessenger()\n    urgent = UrgentMessenger()\n\n    print(royal.deliver(\"Your taxes are due.\"))\n    print(urgent.deliver(\"Enemy at the gates!\"))"
                    ],
                    "Output": "Delivered: Your taxes are due.\n    URGENT: Delivered: Enemy at the gates!",
                    "Explanation": "The RoyalMessenger class uses its own deliver method, which returns \"Delivered: \" followed by the message.\n    The UrgentMessenger class overrides that method and returns \"URGENT: Delivered: \" followed by the message.\n    So the two print statements produce different outputs depending on which class's method is used."
                }
            }
        ],
        "Ans": "class RoyalMessenger:\n    def deliver(self, message):\n        return \"Delivered: \" + message\n\nclass UrgentMessenger(RoyalMessenger):\n    def deliver(self, message):\n        return \"URGENT: Delivered: \" + message\n\n# Example usage\nroyal = RoyalMessenger()\nurgent = UrgentMessenger()\nprint(royal.deliver(\"Your taxes are due.\"))\nprint(urgent.deliver(\"Enemy at the gates!\"))",
        "FunctionCall": "royal = RoyalMessenger()\nurgent = UrgentMessenger()\nprint(royal.deliver(\"Your taxes are due.\"))\nprint(urgent.deliver(\"Enemy at the gates!\"))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(RoyalMessenger().deliver(\"Meeting at noon.\")) "
                    ],
                    "Output": "Delivered: Meeting at noon."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(UrgentMessenger().deliver(\"Dragon sighted near village!\")) "
                    ],
                    "Output": "URGENT: Delivered: Dragon sighted near village!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(RoyalMessenger().deliver(\"\")) "
                    ],
                    "Output": "Delivered:"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(UrgentMessenger().deliver(\"\"))  "
                    ],
                    "Output": "URGENT: Delivered:"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "In a futuristic city, robots handle all deliveries.\nCreate a class DeliveryBot with a method status() that returns \"Package en route.\".\nCreate a subclass FastDeliveryBot that overrides status() to return \"Package arriving in 5 minutes!\".",
        "Template": "class DeliveryBot:\n    def status(self):\n        pass\n\nclass FastDeliveryBot(DeliveryBot):\n    def status(self):\n        pass\n\nbasic = DeliveryBot()\nfast = FastDeliveryBot()\nprint(basic.status())\nprint(fast.status())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "basic = DeliveryBot()\n    fast = FastDeliveryBot()\n\n    print(basic.status())\n    print(fast.status())"
                    ],
                    "Output": "Package en route.\n    Package arriving in 5 minutes!",
                    "Explanation": "The DeliveryBot class returns a default message.\n    The FastDeliveryBot overrides it with a more specific, faster delivery update."
                }
            }
        ],
        "Ans": "class DeliveryBot:\n    def status(self):\n        return \"Package en route.\"\n\nclass FastDeliveryBot(DeliveryBot):\n    def status(self):\n        return \"Package arriving in 5 minutes!\"\n\nbasic = DeliveryBot()\nfast = FastDeliveryBot()\nprint(basic.status())\nprint(fast.status())",
        "FunctionCall": "basic = DeliveryBot()\nfast = FastDeliveryBot()\nprint(basic.status())\nprint(fast.status())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "bot = DeliveryBot()\nprint(bot.status())  "
                    ],
                    "Output": "Package en route."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "fast_bot = FastDeliveryBot()\nprint(fast_bot.status())  "
                    ],
                    "Output": "Package arriving in 5 minutes!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(FastDeliveryBot(), DeliveryBot))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(FastDeliveryBot().status() == DeliveryBot().status())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Space missions use robots for exploration.\nCreate a class Robot with a method communicate() returning \"Beep beep.\".\nCreate a subclass ExplorerRobot that overrides communicate() to return \"Exploring new planets!\".",
        "Template": "class Robot:\n    def communicate(self):\n        pass\n\nclass ExplorerRobot(Robot):\n    def communicate(self):\n        pass\n\nr = Robot()\ne = ExplorerRobot()\nprint(r.communicate())\nprint(e.communicate())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "r = Robot()\n    e = ExplorerRobot()\n\n    print(r.communicate())\n    print(e.communicate())"
                    ],
                    "Output": "Beep beep.\n    Exploring new planets!",
                    "Explanation": "Robot communicates in simple beeps.\n    ExplorerRobot overrides to send exploration messages."
                }
            }
        ],
        "Ans": "class Robot:\n    def communicate(self):\n        return \"Beep beep.\"\n\nclass ExplorerRobot(Robot):\n    def communicate(self):\n        return \"Exploring new planets!\"\n\nr = Robot()\ne = ExplorerRobot()\nprint(r.communicate())\nprint(e.communicate())",
        "FunctionCall": "r = Robot()\ne = ExplorerRobot()\nprint(r.communicate())\nprint(e.communicate())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Robot().communicate())  "
                    ],
                    "Output": "Beep beep."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(ExplorerRobot().communicate())  "
                    ],
                    "Output": "Exploring new planets!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(ExplorerRobot(), Robot))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Robot().communicate() == ExplorerRobot().communicate())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "In a fantasy game, creatures have different battle cries.\nCreate a class Creature with a method battle_cry() returning \"For glory!\".\nCreate a subclass Dragon that overrides battle_cry() returning \"Feel my fiery breath!\".",
        "Template": "class Creature:\n    def battle_cry(self):\n        pass\n\nclass Dragon(Creature):\n    def battle_cry(self):\n        pass\n\nc = Creature()\nd = Dragon()\nprint(c.battle_cry())\nprint(d.battle_cry())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = Creature()\n    d = Dragon()\n\n    print(c.battle_cry())\n    print(d.battle_cry())"
                    ],
                    "Output": "For glory!\n    Feel my fiery breath!",
                    "Explanation": "Creature shouts a generic battle cry.\n    Dragon overrides it with a fiery roar."
                }
            }
        ],
        "Ans": "class Creature:\n    def battle_cry(self):\n        return \"For glory!\"\n\nclass Dragon(Creature):\n    def battle_cry(self):\n        return \"Feel my fiery breath!\"\n\nc = Creature()\nd = Dragon()\nprint(c.battle_cry())\nprint(d.battle_cry())",
        "FunctionCall": "c = Creature()\nd = Dragon()\nprint(c.battle_cry())\nprint(d.battle_cry())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Creature().battle_cry())  "
                    ],
                    "Output": "For glory!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Dragon().battle_cry())  "
                    ],
                    "Output": "Feel my fiery breath!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(Dragon(), Creature))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Creature().battle_cry() == Dragon().battle_cry())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Smart home appliances behave differently based on their model.\nCreate a class Appliance with a method status() returning \"Appliance is off.\".\nCreate a subclass SmartAppliance that overrides status() returning \"Appliance is on and connected.\".",
        "Template": "class Appliance:\n    def status(self):\n        pass\n\nclass SmartAppliance(Appliance):\n    def status(self):\n        pass\n\na = Appliance()\ns = SmartAppliance()\nprint(a.status())\nprint(s.status())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "a = Appliance()\n    s = SmartAppliance()\n\n    print(a.status())\n    print(s.status())"
                    ],
                    "Output": "Appliance is off.\n    Appliance is on and connected.",
                    "Explanation": "The base appliance reports it’s off.\n    The smart appliance overrides status to indicate it’s on and connected."
                }
            }
        ],
        "Ans": "class Appliance:\n    def status(self):\n        return \"Appliance is off.\"\n\nclass SmartAppliance(Appliance):\n    def status(self):\n        return \"Appliance is on and connected.\"\n\na = Appliance()\ns = SmartAppliance()\nprint(a.status())\nprint(s.status())",
        "FunctionCall": "a = Appliance()\ns = SmartAppliance()\nprint(a.status())\nprint(s.status())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Appliance().status())  "
                    ],
                    "Output": "Appliance is off."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(SmartAppliance().status())  "
                    ],
                    "Output": "Appliance is on and connected."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(SmartAppliance(), Appliance))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Appliance().status() == SmartAppliance().status())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Different vehicles make different horn sounds.\nCreate a class Vehicle with a method horn() returning \"Beep beep!\".\nCreate a subclass Truck that overrides horn() to return \"Honk honk!\".",
        "Template": "class Vehicle:\n    def horn(self):\n        pass\n\nclass Truck(Vehicle):\n    def horn(self):\n        pass\n\nv = Vehicle()\nt = Truck()\nprint(v.horn())\nprint(t.horn())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "v = Vehicle()\n    t = Truck()\n\n    print(v.horn())\n    print(t.horn())"
                    ],
                    "Output": "Beep beep!\n    Honk honk!",
                    "Explanation": "The generic vehicle honks \"Beep beep!\".\n    The truck overrides with a louder \"Honk honk!\"."
                }
            }
        ],
        "Ans": "class Vehicle:\n    def horn(self):\n        return \"Beep beep!\"\n\nclass Truck(Vehicle):\n    def horn(self):\n        return \"Honk honk!\"\n\nv = Vehicle()\nt = Truck()\nprint(v.horn())\nprint(t.horn())",
        "FunctionCall": "v = Vehicle()\nt = Truck()\nprint(v.horn())\nprint(t.horn())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Vehicle().horn())  "
                    ],
                    "Output": "Beep beep!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Truck().horn())  "
                    ],
                    "Output": "Honk honk!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(Truck(), Vehicle))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Vehicle().horn() == Truck().horn())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "School announcements vary depending on who is speaking.\nCreate a class Teacher with a method announce() returning \"Class dismissed.\".\nCreate a subclass Principal that overrides announce() to return \"School assembly in the auditorium.\".",
        "Template": "class Teacher:\n    def announce(self):\n        pass\n\nclass Principal(Teacher):\n    def announce(self):\n        pass\n\nteacher = Teacher()\nprincipal = Principal()\nprint(teacher.announce())\nprint(principal.announce())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "teacher = Teacher()\n    principal = Principal()\n\n    print(teacher.announce())\n    print(principal.announce())"
                    ],
                    "Output": "Class dismissed.\n    School assembly in the auditorium.",
                    "Explanation": "Teacher announces dismissal.\n    Principal overrides to announce assembly."
                }
            }
        ],
        "Ans": "class Teacher:\n    def announce(self):\n        return \"Class dismissed.\"\n\nclass Principal(Teacher):\n    def announce(self):\n        return \"School assembly in the auditorium.\"\n\nteacher = Teacher()\nprincipal = Principal()\nprint(teacher.announce())\nprint(principal.announce())",
        "FunctionCall": "teacher = Teacher()\nprincipal = Principal()\nprint(teacher.announce())\nprint(principal.announce())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Teacher().announce())  "
                    ],
                    "Output": "Class dismissed."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Principal().announce())  "
                    ],
                    "Output": "School assembly in the auditorium."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(Principal(), Teacher))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Teacher().announce() == Principal().announce())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Banking apps send different alerts for different accounts.\nCreate a class Account with a method alert() returning \"Account balance updated.\".\nCreate a subclass SavingsAccount that overrides alert() to return \"Savings account interest credited.\".",
        "Template": "class Account:\n    def alert(self):\n        pass\n\nclass SavingsAccount(Account):\n    def alert(self):\n        pass\n\nacc = Account()\nsav = SavingsAccount()\nprint(acc.alert())\nprint(sav.alert())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "acc = Account()\n    sav = SavingsAccount()\n\n    print(acc.alert())\n    print(sav.alert())"
                    ],
                    "Output": "Account balance updated.\n    Savings account interest credited.",
                    "Explanation": "Account sends a general update.\n    SavingsAccount overrides to notify about interest credit."
                }
            }
        ],
        "Ans": "class Account:\n    def alert(self):\n        return \"Account balance updated.\"\n\nclass SavingsAccount(Account):\n    def alert(self):\n        return \"Savings account interest credited.\"\n\nacc = Account()\nsav = SavingsAccount()\nprint(acc.alert())\nprint(sav.alert())",
        "FunctionCall": "acc = Account()\nsav = SavingsAccount()\nprint(acc.alert())\nprint(sav.alert())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Account().alert())  "
                    ],
                    "Output": "Account balance updated."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(SavingsAccount().alert())  "
                    ],
                    "Output": "Savings account interest credited."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(SavingsAccount(), Account))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Account().alert() == SavingsAccount().alert())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Music players announce different statuses.\nCreate a class MusicPlayer with a method status() returning \"Music stopped.\".\nCreate a subclass StreamingPlayer that overrides status() returning \"Streaming music online.\".",
        "Template": "class MusicPlayer:\n    def status(self):\n        pass\n\nclass StreamingPlayer(MusicPlayer):\n    def status(self):\n        pass\n\nmp = MusicPlayer()\nsp = StreamingPlayer()\nprint(mp.status())\nprint(sp.status())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "mp = MusicPlayer()\n    sp = StreamingPlayer()\n\n    print(mp.status())\n    print(sp.status())"
                    ],
                    "Output": "Music stopped.\n    Streaming music online.",
                    "Explanation": "MusicPlayer indicates music stopped.\n    StreamingPlayer overrides with streaming status."
                }
            }
        ],
        "Ans": "class MusicPlayer:\n    def status(self):\n        return \"Music stopped.\"\n\nclass StreamingPlayer(MusicPlayer):\n    def status(self):\n        return \"Streaming music online.\"\n\nmp = MusicPlayer()\nsp = StreamingPlayer()\nprint(mp.status())\nprint(sp.status())",
        "FunctionCall": "mp = MusicPlayer()\nsp = StreamingPlayer()\nprint(mp.status())\nprint(sp.status())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(MusicPlayer().status())  "
                    ],
                    "Output": "Music stopped."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(StreamingPlayer().status())  "
                    ],
                    "Output": "Streaming music online."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(StreamingPlayer(), MusicPlayer))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(MusicPlayer().status() == StreamingPlayer().status())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250813225204",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Online stores provide different shipment info.\nCreate a class Store with a method shipment() returning \"Shipment processed.\".\nCreate a subclass ExpressStore that overrides shipment() returning \"Express shipment on the way!\".",
        "Template": "class Store:\n    def shipment(self):\n        pass\n\nclass ExpressStore(Store):\n    def shipment(self):\n        pass\n\nstore = Store()\nexpress = ExpressStore()\nprint(store.shipment())\nprint(express.shipment())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "store = Store()\n    express = ExpressStore()\n\n    print(store.shipment())\n    print(express.shipment())"
                    ],
                    "Output": "Shipment processed.\n    Express shipment on the way!",
                    "Explanation": "The base Store confirms shipment processed.\n    ExpressStore overrides to confirm faster shipment."
                }
            }
        ],
        "Ans": "class Store:\n    def shipment(self):\n        return \"Shipment processed.\"\n\nclass ExpressStore(Store):\n    def shipment(self):\n        return \"Express shipment on the way!\"\n\nstore = Store()\nexpress = ExpressStore()\nprint(store.shipment())\nprint(express.shipment())",
        "FunctionCall": "store = Store()\nexpress = ExpressStore()\nprint(store.shipment())\nprint(express.shipment())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Store().shipment())  "
                    ],
                    "Output": "Shipment processed."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(ExpressStore().shipment())  "
                    ],
                    "Output": "Express shipment on the way!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(isinstance(ExpressStore(), Store))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Store().shipment() == ExpressStore().shipment())  "
                    ],
                    "Output": "False"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_11",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are designing a simple calculator that can add numbers. The calculator supports adding:\n    Two numbers\n    Three numbers\nCreate a class Calculator with a method add() that behaves differently based on how many arguments are passed (2 or 3).",
        "Template": "class Calculator:\n    def add(self, *args):\n        # your code here\n        pass\n\ncalc = Calculator()\nprint(calc.add(5, 3))\nprint(calc.add(2, 4, 6))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "calc = Calculator()\n\n    print(calc.add(5, 3))       # adding two numbers\n    print(calc.add(2, 4, 6))    # adding three numbers"
                    ],
                    "Output": "8\n    12",
                    "Explanation": "When called with two arguments, it returns their sum (5 + 3 = 8).\n    When called with three arguments, it returns the sum of all three (2 + 4 + 6 = 12)."
                }
            }
        ],
        "Ans": "class Calculator:\n    def add(self, *args):\n        if len(args) == 2:\n            return args[0] + args[1]\n        elif len(args) == 3:\n            return args[0] + args[1] + args[2]\n        else:\n            return \"Unsupported number of arguments\"\n\ncalc = Calculator()\nprint(calc.add(5, 3))       # Output: 8\nprint(calc.add(2, 4, 6))    # Output: 12",
        "FunctionCall": "calc = Calculator()\nprint(calc.add(5, 3))       \nprint(calc.add(2, 4, 6))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Calculator().add(1, 2))  "
                    ],
                    "Output": "3"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Calculator().add(10, 20))  "
                    ],
                    "Output": "30"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Calculator().add(1, 2, 3))  "
                    ],
                    "Output": "6"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Calculator().add(5, 5, 5))  "
                    ],
                    "Output": "15"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_12",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "A smart assistant greets users differently based on how much information is provided.\nCreate a class Greeter with a method greet() that behaves as follows:\n    If passed 1 argument (name), greet with \"Hello, <name>!\"\n    If passed 2 arguments (name, time of day), greet with \"Good <time>, <name>!\"",
        "Template": "class Greeter:\n    def greet(self, *args):\n        # your code here\n        pass\n\ng = Greeter()\nprint(g.greet(\"Alice\"))\nprint(g.greet(\"Bob\", \"evening\"))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "g = Greeter()\n    print(g.greet(\"Alice\"))\n    print(g.greet(\"Bob\", \"evening\"))"
                    ],
                    "Output": "Hello, Alice!\n    Good evening, Bob!",
                    "Explanation": "One argument triggers a basic hello.\n    Two arguments trigger a specific time-of-day greeting."
                }
            }
        ],
        "Ans": "class Greeter:\n    def greet(self, *args):\n        if len(args) == 1:\n            return f\"Hello, {args[0]}!\"\n        elif len(args) == 2:\n            return f\"Good {args[1]}, {args[0]}!\"\n        else:\n            return \"Invalid greeting format\"\n\ng = Greeter()\nprint(g.greet(\"Alice\"))\nprint(g.greet(\"Bob\", \"evening\"))",
        "FunctionCall": "g = Greeter()\nprint(g.greet(\"Alice\"))\nprint(g.greet(\"Bob\", \"evening\"))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Greeter().greet(\"John\"))  "
                    ],
                    "Output": "Hello, John!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Greeter().greet(\"Lisa\", \"morning\"))  "
                    ],
                    "Output": "Good morning, Lisa!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Greeter().greet(\"Max\", \"night\"))  "
                    ],
                    "Output": "Good night, Max!"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Greeter().greet(\"Anna\", \"afternoon\"))  "
                    ],
                    "Output": "Good afternoon, Anna!"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_13",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Create a class Shape with a method area() that:\n    Returns the area of a square if given 1 number (side).\n    Returns the area of a rectangle if given 2 numbers (length, width).",
        "Template": "class Shape:\n    def area(self, *args):\n        pass\n\ns = Shape()\nprint(s.area(4))\nprint(s.area(4, 5))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = Shape()\n    print(s.area(4))      \n    print(s.area(4, 5))"
                    ],
                    "Output": "16\n    20",
                    "Explanation": "One argument: 4 × 4 = 16 (square)\n    Two arguments: 4 × 5 = 20 (rectangle)"
                }
            }
        ],
        "Ans": "class Shape:\n    def area(self, *args):\n        if len(args) == 1:\n            return args[0] ** 2\n        elif len(args) == 2:\n            return args[0] * args[1]\n        else:\n            return \"Invalid input\"\n\ns = Shape()\nprint(s.area(4))\nprint(s.area(4, 5))",
        "FunctionCall": "s = Shape()\nprint(s.area(4))\nprint(s.area(4, 5))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Shape().area(5))  "
                    ],
                    "Output": "25"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Shape().area(3, 7))  "
                    ],
                    "Output": "21"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Shape().area(10, 10))  "
                    ],
                    "Output": "100"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Shape().area(8))  "
                    ],
                    "Output": "64"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_14",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re building a messaging system that sends different types of messages.\nCreate a class Messenger with a method send():\n    If one argument is provided: \"Sending text: <message>\"\n    If two arguments are provided: \"Sending email to <receiver>: <message>\"",
        "Template": "class Messenger:\n    def send(self, *args):\n        pass\n\nm = Messenger()\nprint(m.send(\"Hello!\"))\nprint(m.send(\"john@example.com\", \"Meeting at 5.\"))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "m = Messenger()\n    print(m.send(\"Hello!\"))\n    print(m.send(\"john@example.com\", \"Meeting at 5.\"))"
                    ],
                    "Output": "Sending text: Hello!\n    Sending email to john@example.com: Meeting at 5.",
                    "Explanation": "One input → text message\n    Two inputs → email format message"
                }
            }
        ],
        "Ans": "class Messenger:\n    def send(self, *args):\n        if len(args) == 1:\n            return f\"Sending text: {args[0]}\"\n        elif len(args) == 2:\n            return f\"Sending email to {args[0]}: {args[1]}\"\n        else:\n            return \"Invalid format\"\n\nm = Messenger()\nprint(m.send(\"Hello!\"))\nprint(m.send(\"john@example.com\", \"Meeting at 5.\"))",
        "FunctionCall": "m = Messenger()\nprint(m.send(\"Hello!\"))\nprint(m.send(\"john@example.com\", \"Meeting at 5.\"))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Messenger().send(\"Hi\"))  "
                    ],
                    "Output": "Sending text: Hi"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Messenger().send(\"amy@web.com\", \"Doc submitted\"))  "
                    ],
                    "Output": "Sending email to amy@web.com: Doc submitted"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Messenger().send(\"admin@site.com\", \"Alert!\"))  "
                    ],
                    "Output": "starts with Sending email"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(\"Sending text\" in Messenger().send(\"Ping\"))  "
                    ],
                    "Output": "True"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_15",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Create an invoice generator.\nCreate a class Invoice with method generate():\n    1 argument: returns \"Invoice for $<amount>\"\n    2 arguments: returns \"Invoice for $<amount> to <client>\"",
        "Template": "class Invoice:\n    def generate(self, *args):\n        pass\n\ninv = Invoice()\nprint(inv.generate(200))\nprint(inv.generate(350, \"Tech Corp\"))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "inv = Invoice()\n    print(inv.generate(200))\n    print(inv.generate(350, \"Tech Corp\"))"
                    ],
                    "Output": "Invoice for $200\n    Invoice for $350 to Tech Corp",
                    "Explanation": "One argument → invoice amount\n    Two arguments → invoice amount + client"
                }
            }
        ],
        "Ans": "class Invoice:\n    def generate(self, *args):\n        if len(args) == 1:\n            return f\"Invoice for ${args[0]}\"\n        elif len(args) == 2:\n            return f\"Invoice for ${args[0]} to {args[1]}\"\n        else:\n            return \"Invalid invoice data\"\n\ninv = Invoice()\nprint(inv.generate(200))\nprint(inv.generate(350, \"Tech Corp\"))",
        "FunctionCall": "inv = Invoice()\nprint(inv.generate(200))\nprint(inv.generate(350, \"Tech Corp\"))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Invoice().generate(100))  "
                    ],
                    "Output": "Invoice for $100"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Invoice().generate(500, \"XYZ Ltd\"))  "
                    ],
                    "Output": "Invoice for $500 to XYZ Ltd"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Invoice().generate(0))  "
                    ],
                    "Output": "Invoice for $0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Invoice().generate(75, \"ClientA\"))  "
                    ],
                    "Output": "contains ClientA"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_16",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Create a logging system that records event types and optionally a message.\nCreate a class Logger with a method log():\n    1 argument → returns \"Event: <event_type>\"\n    2 arguments → returns \"Event: <event_type> | Message: <message>\"",
        "Template": "class Logger:\n    def log(self, *args):\n        pass\n\nl = Logger()\nprint(l.log(\"ERROR\"))\nprint(l.log(\"INFO\", \"Startup complete\"))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "l = Logger()\n    print(l.log(\"ERROR\"))\n    print(l.log(\"INFO\", \"Startup complete\"))"
                    ],
                    "Output": "Event: ERROR\n    Event: INFO | Message: Startup complete",
                    "Explanation": "One input → only event type\n    Two inputs → event type and message"
                }
            }
        ],
        "Ans": "class Logger:\n    def log(self, *args):\n        if len(args) == 1:\n            return f\"Event: {args[0]}\"\n        elif len(args) == 2:\n            return f\"Event: {args[0]} | Message: {args[1]}\"\n        else:\n            return \"Invalid log format\"\n\nl = Logger()\nprint(l.log(\"ERROR\"))\nprint(l.log(\"INFO\", \"Startup complete\"))",
        "FunctionCall": "l = Logger()\nprint(l.log(\"ERROR\"))\nprint(l.log(\"INFO\", \"Startup complete\"))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Logger().log(\"WARNING\"))  "
                    ],
                    "Output": "Event: WARNING"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Logger().log(\"ERROR\", \"Disk Full\"))  "
                    ],
                    "Output": "Event: ERROR | Message: Disk Full"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(\"Event:\" in Logger().log(\"DEBUG\"))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(\"Message:\" in Logger().log(\"INFO\", \"All OK\"))  "
                    ],
                    "Output": "True"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_17",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are designing a discount system for a shopping website.\nCreate a class DiscountManager with a method apply_discount()\n    If passed 1 value (price): returns price after applying 10% discount.\n    If passed 2 values (price, discount_rate): apply custom discount.",
        "Template": "class DiscountManager:\n    def apply_discount(self, *args):\n        pass\n\nd = DiscountManager()\nprint(d.apply_discount(100))\nprint(d.apply_discount(200, 20))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "d = DiscountManager()\n    print(d.apply_discount(100))\n    print(d.apply_discount(200, 20))"
                    ],
                    "Output": "90.0\n    160.0",
                    "Explanation": "10% of 100 = 10 → 100 - 10 = 90\n    20% of 200 = 40 → 200 - 40 = 160"
                }
            }
        ],
        "Ans": "class DiscountManager:\n    def apply_discount(self, *args):\n        if len(args) == 1:\n            return args[0] * 0.9\n        elif len(args) == 2:\n            return args[0] * (1 - args[1] / 100)\n        else:\n            return \"Invalid input\"\n\nd = DiscountManager()\nprint(d.apply_discount(100))\nprint(d.apply_discount(200, 20))",
        "FunctionCall": "d = DiscountManager()\nprint(d.apply_discount(100))\nprint(d.apply_discount(200, 20))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(DiscountManager().apply_discount(100))  "
                    ],
                    "Output": "90.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(DiscountManager().apply_discount(150, 50))  "
                    ],
                    "Output": "75.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(DiscountManager().apply_discount(250, 0))  "
                    ],
                    "Output": "250.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(DiscountManager().apply_discount(100, 100))  "
                    ],
                    "Output": "0.0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_18",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are designing a photo editor app where users can apply filters.\nCreate a class PhotoEditor with method apply_filter():\n    If 1 argument (filter name) is given → return \"Applying <filter_name> filter\"\n    If 2 arguments (filter name, intensity) → return \"Applying <filter_name> filter at <intensity>%\"",
        "Template": "class PhotoEditor:\n    def apply_filter(self, *args):\n        pass\n\neditor = PhotoEditor()\nprint(editor.apply_filter(\"sepia\"))\nprint(editor.apply_filter(\"blur\", 75))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "editor = PhotoEditor()\n    print(editor.apply_filter(\"sepia\"))\n    print(editor.apply_filter(\"blur\", 75))"
                    ],
                    "Output": "Applying sepia filter\n    Applying blur filter at 75%",
                    "Explanation": "One argument: default intensity\n    Two arguments: specify how strong the filter should be"
                }
            }
        ],
        "Ans": "class PhotoEditor:\n    def apply_filter(self, *args):\n        if len(args) == 1:\n            return f\"Applying {args[0]} filter\"\n        elif len(args) == 2:\n            return f\"Applying {args[0]} filter at {args[1]}%\"\n        else:\n            return \"Invalid filter usage\"\n\neditor = PhotoEditor()\nprint(editor.apply_filter(\"sepia\"))\nprint(editor.apply_filter(\"blur\", 75))",
        "FunctionCall": "editor = PhotoEditor()\nprint(editor.apply_filter(\"sepia\"))\nprint(editor.apply_filter(\"blur\", 75))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(PhotoEditor().apply_filter(\"grayscale\"))  "
                    ],
                    "Output": "Applying grayscale filter"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(PhotoEditor().apply_filter(\"contrast\", 100))  "
                    ],
                    "Output": "Applying contrast filter at 100%"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(\"filter\" in PhotoEditor().apply_filter(\"vintage\"))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(PhotoEditor().apply_filter(\"sharpen\", 30).endswith(\"%\"))  "
                    ],
                    "Output": "True"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_19",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "Create a class TicketBooking with a method book():\n    If passed only 1 value (movie): returns \"1 ticket booked for <movie>\"\n    If passed 2 values (movie, number): returns \"<number> tickets booked for <movie>\"",
        "Template": "class TicketBooking:\n    def book(self, *args):\n        pass\n\nt = TicketBooking()\nprint(t.book(\"Inception\"))\nprint(t.book(\"Oppenheimer\", 3))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "t = TicketBooking()\n    print(t.book(\"Inception\"))\n    print(t.book(\"Oppenheimer\", 3))"
                    ],
                    "Output": "1 ticket booked for Inception\n    3 tickets booked for Oppenheimer",
                    "Explanation": "One input = 1 default ticket\n    Two inputs = number of tickets specified"
                }
            }
        ],
        "Ans": "class TicketBooking:\n    def book(self, *args):\n        if len(args) == 1:\n            return f\"1 ticket booked for {args[0]}\"\n        elif len(args) == 2:\n            return f\"{args[1]} tickets booked for {args[0]}\"\n        else:\n            return \"Invalid booking\"\n\nt = TicketBooking()\nprint(t.book(\"Inception\"))\nprint(t.book(\"Oppenheimer\", 3))",
        "FunctionCall": "t = TicketBooking()\nprint(t.book(\"Inception\"))\nprint(t.book(\"Oppenheimer\", 3))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(TicketBooking().book(\"Avatar\"))  "
                    ],
                    "Output": "1 ticket booked for Avatar"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(TicketBooking().book(\"Barbie\", 2))  "
                    ],
                    "Output": "2 tickets booked for Barbie"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(\"ticket\" in TicketBooking().book(\"Avengers\"))  "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(TicketBooking().book(\"Dune\", 0))  "
                    ],
                    "Output": "0 tickets booked for Dune"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "unknown_20",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re working on a CAD (Computer-Aided Design) application used by engineers. There's a measurement tool that calculates the area of a shape, but it must behave differently depending on how many parameters the user provides:\n    If the user provides 1 measurement, it's treated as the side of a square.\n    If the user provides 2 measurements, it's treated as the length and width of a rectangle.\nYou need to implement this logic in a class called AreaCalculator using method overloading principles in Python.",
        "Template": "class AreaCalculator:\n    def calculate(self, *args):\n        pass\n\na = AreaCalculator()\nprint(a.calculate(5))\nprint(a.calculate(4, 6))",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "a = AreaCalculator()\n    print(a.calculate(5))\n    print(a.calculate(4, 6))"
                    ],
                    "Output": "25\n    24",
                    "Explanation": "First call: 5 is the side of a square → 5 × 5 = 25\n    Second call: 4 × 6 = 24 (rectangle)"
                }
            }
        ],
        "Ans": "class AreaCalculator:\n    def calculate(self, *args):\n        if len(args) == 1:\n            return args[0] * args[0]\n        elif len(args) == 2:\n            return args[0] * args[1]\n        else:\n            return \"Invalid input\"\n\na = AreaCalculator()\nprint(a.calculate(5))\nprint(a.calculate(4, 6))",
        "FunctionCall": "a = AreaCalculator()\nprint(a.calculate(5))\nprint(a.calculate(4, 6))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(AreaCalculator().calculate(3))  "
                    ],
                    "Output": "9"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(AreaCalculator().calculate(10, 2))  "
                    ],
                    "Output": "20"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(AreaCalculator().calculate(0))  "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(AreaCalculator().calculate(0, 5))  "
                    ],
                    "Output": "0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164402",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a system for a small town library. The librarian needs a way to set and view the title of a book directly. In your design, each book must have a publicly accessible title attribute so the librarian can update or retrieve the book’s name without needing any special method.\nHelp the library build a basic Book class that makes this possible.",
        "Template": "class Book:\n    def __init__(self):\n        pass\n\nb = Book()\nb.title = \"1984\"\nprint(b.title)",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "b = Book()\n\tb.title = \"1984\"\n\tprint(b.title)"
                    ],
                    "Output": "1984",
                    "Explanation": "The title was assigned directly because the attribute is public. When printed, it shows the updated value."
                }
            }
        ],
        "Ans": "class Book:\n    def __init__(self):\n        self.title = \"\"\n\nb = Book()\nb.title = \"1984\"\nprint(b.title)",
        "FunctionCall": "b = Book()\nb.title = \"1984\"\nprint(b.title)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "b1 = Book()\nb1.title = \"Pride and Prejudice\"\nprint(b1.title)  "
                    ],
                    "Output": "Pride and Prejudice"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b2 = Book()\nb2.title = \"To Kill a Mockingbird\"\nprint(b2.title)  "
                    ],
                    "Output": "To Kill a Mockingbird"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b3 = Book()\nb3.title = \"\"\nprint(b3.title)  "
                    ],
                    "Output": "(empty string)"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b4 = Book()\nb4.title = \"War and Peace\"\nprint(b4.title)  "
                    ],
                    "Output": "War and Peace"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b5 = Book()"
                    ],
                    "Output": "b5.title = \"The Hobbit\"\nprint(b5.title)  # Expected: The Hobbit"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164402",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're working on a school portal where teachers manually update student attendance. Each student has a present_days counter that should be publicly accessible and modifiable. Demonstrate how this works using a Student class, allowing direct access to the counter.",
        "Template": "class Student:\n    def __init__(self):\n        pass\n\ns = Student()\ns.present_days = 15\nprint(s.present_days)",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = Student()\n        s.present_days = 15\n        print(s.present_days)"
                    ],
                    "Output": "15",
                    "Explanation": "The public variable present_days allows direct assignment and retrieval of a student's attendance record."
                }
            }
        ],
        "Ans": "class Student:\n    def __init__(self):\n        self.present_days = 0\n\ns = Student()\ns.present_days = 15\nprint(s.present_days)",
        "FunctionCall": "s = Student()\ns.present_days = 15\nprint(s.present_days)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = Student()\ns1.present_days = 10\nprint(s1.present_days)  "
                    ],
                    "Output": "10"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s2 = Student()\ns2.present_days = 0\nprint(s2.present_days)  "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s3 = Student()\ns3.present_days = 100\nprint(s3.present_days)  "
                    ],
                    "Output": "100"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s4 = Student()\ns4.present_days += 1\nprint(s4.present_days)  "
                    ],
                    "Output": "1"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s5 = Student()"
                    ],
                    "Output": "s5.present_days = 99\ns5.present_days -= 10\nprint(s5.present_days)  # Expected: 89"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164402",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are designing a simple banking simulation. Each BankAccount should have a public variable account_holder representing the owner's name. The customer service team should be able to access and modify it directly.",
        "Template": "class BankAccount:\n    def __init__(self):\n        pass\n\nacc = BankAccount()\nacc.account_holder = \"Alice\"\nprint(acc.account_holder)",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "acc = BankAccount()\n        acc.account_holder = \"Alice\"\n        print(acc.account_holder)"
                    ],
                    "Output": "Alice",
                    "Explanation": "The account_holder variable is public, so it can be directly modified and accessed."
                }
            }
        ],
        "Ans": "class BankAccount:\n    def __init__(self):\n        self.account_holder = \"\"\n\nacc = BankAccount()\nacc.account_holder = \"Alice\"\nprint(acc.account_holder)",
        "FunctionCall": "acc = BankAccount()\nacc.account_holder = \"Alice\"\nprint(acc.account_holder)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "a = BankAccount()\na.account_holder = \"Bob\"\nprint(a.account_holder)  "
                    ],
                    "Output": "Bob"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a = BankAccount()\nprint(a.account_holder)  "
                    ],
                    "Output": "(empty string)"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a = BankAccount()\na.account_holder = \"Zara\"\na.account_holder = \"Lily\"\nprint(a.account_holder)  "
                    ],
                    "Output": "Lily"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a = BankAccount()\na.account_holder = \"123\"\nprint(a.account_holder)  "
                    ],
                    "Output": "123"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a = BankAccount()"
                    ],
                    "Output": "a.account_holder = \"\"\nprint(a.account_holder)  # Expected: (empty string)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164402",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're creating an online education platform. Each Course object should store how many modules the student has completed. This completed_modules count should be public so it can be updated as students progress through the course.",
        "Template": "class Course:\n    def __init__(self):\n        pass\n\nc = Course()\nc.completed_modules = 5\nprint(c.completed_modules)",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = Course()\n        c.completed_modules = 5\n        print(c.completed_modules)"
                    ],
                    "Output": "5",
                    "Explanation": "The value is stored in a public variable, making direct access and updates easy."
                }
            }
        ],
        "Ans": "class Course:\n    def __init__(self):\n        self.completed_modules = 0\n\nc = Course()\nc.completed_modules = 5\nprint(c.completed_modules)",
        "FunctionCall": "c = Course()\nc.completed_modules = 5\nprint(c.completed_modules)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "c = Course()\nc.completed_modules = 3\nprint(c.completed_modules)  "
                    ],
                    "Output": "3"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c = Course()\nprint(c.completed_modules)  "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c = Course()\nc.completed_modules += 1\nprint(c.completed_modules)  "
                    ],
                    "Output": "1"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c = Course()\nc.completed_modules = 12\nprint(c.completed_modules)  "
                    ],
                    "Output": "12"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c = Course()"
                    ],
                    "Output": "c.completed_modules = 0\nprint(c.completed_modules)  # Expected: 0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164402",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "In your company's HR portal, each Employee object needs to track how many leave days are remaining. The HR manager wants to access and update this leave count directly without methods. Implement the class using a public variable leave_days.",
        "Template": "class Employee:\n    def __init__(self):\n        pass\n\nemp = Employee()\nemp.leave_days = 10\nprint(emp.leave_days)",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "emp = Employee()\n        emp.leave_days = 10\n        print(emp.leave_days)"
                    ],
                    "Output": "10",
                    "Explanation": "The leave_days variable is public and can be freely updated and read."
                }
            }
        ],
        "Ans": "class Employee:\n    def __init__(self):\n        self.leave_days = 0\n\nemp = Employee()\nemp.leave_days = 10\nprint(emp.leave_days)",
        "FunctionCall": "emp = Employee()\nemp.leave_days = 10\nprint(emp.leave_days)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "e = Employee()\ne.leave_days = 15\nprint(e.leave_days)  "
                    ],
                    "Output": "15"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e = Employee()\nprint(e.leave_days)  "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e = Employee()\ne.leave_days -= 1\nprint(e.leave_days)  "
                    ],
                    "Output": "-1"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e = Employee()\ne.leave_days = 20\nprint(e.leave_days)  "
                    ],
                    "Output": "20"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e = Employee()"
                    ],
                    "Output": "e.leave_days = 0\nprint(e.leave_days)  # Expected: 0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164404",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building an ATM software system. Each account should store its balance as a private variable so that it can’t be accessed or changed directly from outside the class.\nUsers should be able to withdraw money using a method withdraw(amount), but:\n\tIf the balance is insufficient, the withdrawal should be denied.\n\tOnly the method should access and modify the balance.",
        "Template": "class BankAccount:\n    def __init__(self, initial_balance):\n        pass\n\n    def withdraw(self, amount):\n        pass\n\nacc = BankAccount(1000)\nacc.withdraw(200)\nacc.withdraw(900)",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "acc = BankAccount(1000)\n        acc.withdraw(200)\n        acc.withdraw(900)"
                    ],
                    "Output": "Withdrawal successful. Remaining balance: 800\n        Insufficient funds. Balance remains: 800",
                    "Explanation": "Initial balance is ₹1000.\n    ₹200 is successfully withdrawn, leaving ₹800.\n    Attempting to withdraw ₹900 fails because only ₹800 is left."
                }
            }
        ],
        "Ans": "class BankAccount:\n    def __init__(self, initial_balance):\n        self.__balance = initial_balance\n\n    def withdraw(self, amount):\n        if amount <= self.__balance:\n            self.__balance -= amount\n            print(f\"Withdrawal successful. Remaining balance: {self.__balance}\")\n        else:\n            print(f\"Insufficient funds. Balance remains: {self.__balance}\")",
        "FunctionCall": "acc = BankAccount(1000)\nacc.withdraw(200)\nacc.withdraw(900)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "acc = BankAccount(1000)\nacc.withdraw(500)  "
                    ],
                    "Output": "500 left"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "acc = BankAccount(200)\nacc.withdraw(300)  "
                    ],
                    "Output": "Insufficient"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "acc = BankAccount(0)\nacc.withdraw(0)  "
                    ],
                    "Output": "0 left"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "acc = BankAccount(100)\nacc.withdraw(100)  "
                    ],
                    "Output": "0 left"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "acc = BankAccount(1000)"
                    ],
                    "Output": "acc.withdraw(999)\nacc.withdraw(2)  # Expected: Insufficient on second"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164404",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re creating an exam grading system. Every StudentResult should have a private score that can be updated only through a method. The update_score(new_score) method should:\n    Only allow updating if the new score is higher than the previous one.\n    Reject lower scores.\n\nThis ensures that a student’s best score is always stored.",
        "Template": "class StudentResult:\n    def __init__(self):\n        pass\n\n    def update_score(self, new_score):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "res = StudentResult()\n    res.update_score(78)\n    res.update_score(65)\n    res.update_score(88)"
                    ],
                    "Output": "Score updated to 78\n    New score is lower. Score remains: 78\n    Score updated to 88",
                    "Explanation": "The initial score is 0.\n    78 is higher and accepted.\n    65 is lower and rejected.\n    88 is higher and accepted"
                }
            }
        ],
        "Ans": "class StudentResult:\n    def __init__(self):\n        self.__score = 0\n\n    def update_score(self, new_score):\n        if new_score > self.__score:\n            self.__score = new_score\n            print(f\"Score updated to {self.__score}\")\n        else:\n            print(f\"New score is lower. Score remains: {self.__score}\")",
        "FunctionCall": "s = StudentResult()\ns.update_score(70)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s = StudentResult()\ns.update_score(70)  "
                    ],
                    "Output": "Score updated to 70"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s.update_score(65)  "
                    ],
                    "Output": "Rejected"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s.update_score(80)  "
                    ],
                    "Output": "Score updated to 80"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s.update_score(80)  "
                    ],
                    "Output": "Rejected (equal)"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s.update_score(90)"
                    ],
                    "Output": "s.update_score(89)  # Expected: Rejected"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164404",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re developing a loyalty system for a shopping app. Each UserAccount should store loyalty points as a private variable.\n\nUsers can earn points via the method add_points(amount), but:\n    Only values greater than 0 are accepted.\n    Points should be accumulated internally.\n\nA separate method get_points() should return the total available points.",
        "Template": "class UserAccount:\n    def __init__(self):\n        pass\n\n    def add_points(self, amount):\n        pass\n\n    def get_points(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "user = UserAccount()\n    user.add_points(50)\n    user.add_points(-10)\n    user.get_points()"
                    ],
                    "Output": "None\n    50",
                    "Explanation": "50 points are added successfully.\n    -10 is ignored.\n    get_points() returns the total, which is 50."
                }
            }
        ],
        "Ans": "class UserAccount:\n    def __init__(self):\n        self.__points = 0\n\n    def add_points(self, amount):\n        if amount > 0:\n            self.__points += amount\n            return True\n        return False\n\n    def get_points(self):\n        return self.__points",
        "FunctionCall": "u1 = UserAccount()\nu1.add_points(10)\nassert u1.get_points()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "u1 = UserAccount()\nu1.add_points(10)\nassert u1.get_points() "
                    ],
                    "Output": "10"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "u2 = UserAccount()\nu2.add_points(-5)\nassert u2.get_points() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "u3 = UserAccount()\nu3.add_points(0)\nassert u3.get_points() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "u4 = UserAccount()\nu4.add_points(100)\nu4.add_points(50)\nassert u4.get_points() "
                    ],
                    "Output": "150"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "u5 = UserAccount()"
                    ],
                    "Output": "assert u5.get_points() # Expected: 0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164404",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing an airline booking system. Each FlightSeat stores a private __is_booked flag.\nIt supports:\n    book(): Marks seat as booked if not already. Returns a success/failure message.\n    status(): Returns \"Booked\" or \"Available\".",
        "Template": "class FlightSeat:\n    def __init__(self):\n        pass\n\n    def book(self):\n        pass\n\n    def status(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "seat = FlightSeat()\n    seat.book()\n    seat.status()\n    seat.book()"
                    ],
                    "Output": "\"Booking successful\"\n    \"Booked\"\n    \"Seat already booked\"",
                    "Explanation": "The seat starts as available.\n    The first booking succeeds.\n    The second booking fails since it’s already booked."
                }
            }
        ],
        "Ans": "class FlightSeat:\n    def __init__(self):\n        self.__is_booked = False\n\n    def book(self):\n        if not self.__is_booked:\n            self.__is_booked = True\n            return \"Booking successful\"\n        return \"Seat already booked\"\n\n    def status(self):\n        return \"Booked\" if self.__is_booked else \"Available\"",
        "FunctionCall": "s1 = FlightSeat()\nassert s1.status()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = FlightSeat()\nassert s1.status() "
                    ],
                    "Output": "Available"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s2 = FlightSeat()\nassert s2.book() "
                    ],
                    "Output": "Booking successful"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s3 = FlightSeat()\ns3.book()\nassert s3.status() "
                    ],
                    "Output": "Booked"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s4 = FlightSeat()\ns4.book()\nassert s4.book() "
                    ],
                    "Output": "Seat already booked"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s5 = FlightSeat()"
                    ],
                    "Output": "assert s5.status() # Expected: \"Available\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164404",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re creating a digital vault system. The vault should have a private __is_locked flag and a password.\nThe user can:\n    unlock(password): Unlock only with correct password.\n    lock(): Lock the vault.\n    is_open(): Return True if unlocked.",
        "Template": "class Vault:\n    def __init__(self, password):\n        pass\n\n    def unlock(self, password):\n        pass\n\n    def lock(self):\n        pass\n\n    def is_open(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "v = Vault(\"pass123\")\n    v.unlock(\"wrong\")\n    v.is_open()\n    v.unlock(\"pass123\")\n    v.is_open()"
                    ],
                    "Output": "False\n    True",
                    "Explanation": "First unlock fails due to incorrect password.\n    Second attempt succeeds.\n    is_open() reflects the state accordingly."
                }
            }
        ],
        "Ans": "class Vault:\n    def __init__(self, password):\n        self.__password = password\n        self.__is_locked = True\n\n    def unlock(self, password):\n        if password == self.__password:\n            self.__is_locked = False\n\n    def lock(self):\n        self.__is_locked = True\n\n    def is_open(self):\n        return not self.__is_locked",
        "FunctionCall": "v1 = Vault(\"1234\")\nv1.unlock(\"0000\")\nassert v1.is_open()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "v5 = Vault(\"secret\")"
                    ],
                    "Output": "v5.unlock(\"secret\")\nassert hasattr(v5, '_Vault__is_locked')"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164403",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building an inventory system for an e-commerce platform. Each product should store its stock as a protected variable _stock.\nA method sell(quantity) should:\n    Decrease stock only if the quantity is available.\n    Return a message indicating success or failure.\n    Another method get_stock() should return the current stock.",
        "Template": "class Product:\n    def __init__(self, name, stock):\n        pass\n\n    def sell(self, quantity):\n        pass\n\n    def get_stock(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "p = Product(\"Laptop\", 10)\n    p.sell(3)\n    p.sell(8)\n    p.get_stock()"
                    ],
                    "Output": "\"Sold 3 units of Laptop\"\n    \"Insufficient stock\"\n    7",
                    "Explanation": "Initially 10 units are in stock.\n    First sale of 3 succeeds → stock becomes 7.\n    Second sale of 8 fails → not enough stock.\n    get_stock() returns the remaining 7 units."
                }
            }
        ],
        "Ans": "class Product:\n    def __init__(self, name, stock):\n        self.name = name\n        self._stock = stock\n\n    def sell(self, quantity):\n        if quantity <= self._stock:\n            self._stock -= quantity\n            return f\"Sold {quantity} units of {self.name}\"\n        return \"Insufficient stock\"\n\n    def get_stock(self):\n        return self._stock",
        "FunctionCall": "p = Product(\"Laptop\", 10)    \np.sell(3)   \np.sell(8)   \np.get_stock()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "p1 = Product(\"Book\", 5)\nassert p1.sell(2) "
                    ],
                    "Output": "Sold 2 units of Book"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p2 = Product(\"Pen\", 3)\nassert p2.sell(4) "
                    ],
                    "Output": "Insufficient stock"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p3 = Product(\"Shirt\", 0)\nassert p3.get_stock() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p4 = Product(\"Mug\", 10)\np4.sell(5)\nassert p4.get_stock() "
                    ],
                    "Output": "5"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p5 = Product(\"Bag\", 1)"
                    ],
                    "Output": "assert p5.sell(1) # Expected: \"Sold 1 units of Bag\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164403",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re building a banking system. Each SavingsAccount should store the account balance as a protected _balance.\n    Implement the method add_interest() that:\n    Adds 5% interest to the balance.\n    Returns the updated balance.",
        "Template": "class SavingsAccount:\n    def __init__(self, initial_balance):\n        pass\n\n    def add_interest(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "acc = SavingsAccount(1000)\n    acc.add_interest()\n    acc._balance"
                    ],
                    "Output": "1050.0",
                    "Explanation": "5% of 1000 is 50 → new balance becomes 1050.0."
                }
            }
        ],
        "Ans": "class SavingsAccount:\n    def __init__(self, initial_balance):\n        self._balance = initial_balance\n\n    def add_interest(self):\n        interest = self._balance * 0.05\n        self._balance += interest\n        return self._balance",
        "FunctionCall": "s1 = SavingsAccount(100)\nassert round(s1.add_interest(), 2)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = SavingsAccount(100)\nassert round(s1.add_interest(), 2) "
                    ],
                    "Output": "105.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s2 = SavingsAccount(0)\nassert s2.add_interest() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s3 = SavingsAccount(1000)\ns3.add_interest()\nassert round(s3._balance, 2) "
                    ],
                    "Output": "1050.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s4 = SavingsAccount(200)\ns4.add_interest()\ns4.add_interest()\nassert round(s4._balance, 2) "
                    ],
                    "Output": "220.5"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s5 = SavingsAccount(500)"
                    ],
                    "Output": "assert hasattr(s5, '_balance')"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164403",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing a grading system. Each student has a protected variable _grade.\nThe method update_grade(new_grade) should:\n    Update the grade only if the new grade is higher.\n    Return the updated grade or current grade if not updated.",
        "Template": "class Student:\n    def __init__(self, name):\n        pass\n\n    def update_grade(self, new_grade):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = Student(\"Alice\")\n    s.update_grade(75)\n    s.update_grade(60)"
                    ],
                    "Output": "75\n    75",
                    "Explanation": "First update sets grade to 75.\n    Second update is ignored because 60 is lower."
                }
            }
        ],
        "Ans": "class Student:\n    def __init__(self, name):\n        self.name = name\n        self._grade = 0\n\n    def update_grade(self, new_grade):\n        if new_grade > self._grade:\n            self._grade = new_grade\n        return self._grade",
        "FunctionCall": "s1 = Student(\"Bob\")\nassert s1.update_grade(80)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = Student(\"Bob\")\nassert s1.update_grade(80) "
                    ],
                    "Output": "80"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s2 = Student(\"Charlie\")\nassert s2.update_grade(60) "
                    ],
                    "Output": "60\nassert s2.update_grade(55)"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s3 = Student(\"David\")\nassert s3.update_grade(0) "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s4 = Student(\"Eva\")\ns4.update_grade(40)\nassert s4.update_grade(90) "
                    ],
                    "Output": "90"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s6 = Student(\"Grace\")"
                    ],
                    "Output": "s6.update_grade(10)\ns6.update_grade(15)\ns6.update_grade(12)\nassert s6._grade # Expected: 15"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164403",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a time-tracking system for employees. Each employee has a protected _access_count variable.\nThe method log_access() should:\n    Increment _access_count.\n    Return the new count.",
        "Template": "class Employee:\n    def __init__(self, name):\n        pass\n\n    def log_access(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "emp = Employee(\"Ravi\")\n    emp.log_access()\n    emp.log_access()"
                    ],
                    "Output": "1\n    2",
                    "Explanation": "Each call increments the count by 1."
                }
            }
        ],
        "Ans": "class Employee:\n    def __init__(self, name):\n        self.name = name\n        self._access_count = 0\n\n    def log_access(self):\n        self._access_count += 1\n        return self._access_count",
        "FunctionCall": "e1 = Employee(\"A\")\nassert e1.log_access()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "e1 = Employee(\"A\")\nassert e1.log_access() "
                    ],
                    "Output": "1"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e2 = Employee(\"B\")\ne2.log_access()\ne2.log_access()\nassert e2._access_count "
                    ],
                    "Output": "2"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e4 = Employee(\"D\")\nfor _ in range(10):\ne4.log_access()\nassert e4._access_count "
                    ],
                    "Output": "10"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e6 = Employee(\"F\")"
                    ],
                    "Output": "e6.log_access()\nassert e6._access_count > 0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164403",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're designing a system to track vehicle mileage. Each Vehicle should store mileage as a protected _mileage.\nImplement:\n    drive(distance): Adds distance to mileage (only if positive).\n    get_mileage(): Returns total mileage.",
        "Template": "class Vehicle:\n    def __init__(self, name):\n        pass\n\n    def drive(self, distance):\n        pass\n\n    def get_mileage(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "v = Vehicle(\"Car\")\n    v.drive(100)\n    v.drive(-50)\n    v.get_mileage()"
                    ],
                    "Output": "100",
                    "Explanation": "100 km is added.\n    -50 km is ignored.\n    Mileage remains at 100 km."
                }
            }
        ],
        "Ans": "class Vehicle:\n    def __init__(self, name):\n        self.name = name\n        self._mileage = 0\n\n    def drive(self, distance):\n        if distance > 0:\n            self._mileage += distance\n\n    def get_mileage(self):\n        return self._mileage",
        "FunctionCall": "v1 = Vehicle(\"Bike\")\nv1.drive(100)\nassert v1.get_mileage()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "v1 = Vehicle(\"Bike\")\nv1.drive(100)\nassert v1.get_mileage() "
                    ],
                    "Output": "100"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "v2 = Vehicle(\"Scooter\")\nv2.drive(-10)\nassert v2.get_mileage() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "v3 = Vehicle(\"Bus\")\nv3.drive(50)\nv3.drive(25)\nassert v3.get_mileage() "
                    ],
                    "Output": "75"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "v5 = Vehicle(\"Jet\")\nv5.drive(0)\nassert v5.get_mileage() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "v6 = Vehicle(\"Truck\")"
                    ],
                    "Output": "for _ in range(5):\nv6.drive(10)\nassert v6.get_mileage() # Expected: 50"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're creating a system to calculate employee salaries. A base class Employee contains name and base salary. The class Developer inherits from Employee and includes a bonus amount. You must calculate the total salary by adding the bonus to the base salary.",
        "Template": "class Employee:\n    def __init__(self, name, base_salary):\n        pass\n\nclass Developer(Employee):\n    def __init__(self, name, base_salary, bonus):\n        pass\n\n    def calculate_salary(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "dev = Developer(\"Alice\", 50000, 10000)\n    dev.calculate_salary()"
                    ],
                    "Output": "60000",
                    "Explanation": "Base salary = 50000, Bonus = 10000 → Total = 60000"
                }
            }
        ],
        "Ans": "class Employee:\n    def __init__(self, name, base_salary):\n        self.name = name\n        self.base_salary = base_salary\n\nclass Developer(Employee):\n    def __init__(self, name, base_salary, bonus):\n        super().__init__(name, base_salary)\n        self.bonus = bonus\n\n    def calculate_salary(self):\n        return self.base_salary + self.bonus",
        "FunctionCall": "d1 = Developer(\"A\", 40000, 5000)\nassert d1.calculate_salary()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "d1 = Developer(\"A\", 40000, 5000)\nassert d1.calculate_salary() "
                    ],
                    "Output": "45000"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d2 = Developer(\"B\", 0, 0)\nassert d2.calculate_salary() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d3 = Developer(\"C\", 70000, 10000)\nassert d3.calculate_salary() "
                    ],
                    "Output": "80000"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d4 = Developer(\"D\", 30000, 0)\nassert d4.calculate_salary() "
                    ],
                    "Output": "30000"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d6 = Developer(\"F\", 1, 1)"
                    ],
                    "Output": "assert d6.calculate_salary() # Expected: 2"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re building a library system. A base class Book contains the title and author. The derived class IssuedBook adds borrower's name and issue date. Implement a method to return a summary of the issued book details.",
        "Template": "class Book:\n    def __init__(self, title, author):\n        pass\n\nclass IssuedBook(Book):\n    def __init__(self, title, author, borrower, date):\n        pass\n\n    def get_summary(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "b = IssuedBook(\"1984\", \"Orwell\", \"Tom\", \"2023-01-10\")\n    b.get_summary()"
                    ],
                    "Output": "\"1984 by Orwell issued to Tom on 2023-01-10\"",
                    "Explanation": "Concatenates title, author, borrower, and date into a readable string."
                }
            }
        ],
        "Ans": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\nclass IssuedBook(Book):\n    def __init__(self, title, author, borrower, date):\n        super().__init__(title, author)\n        self.borrower = borrower\n        self.date = date\n\n    def get_summary(self):\n        return f\"{self.title} by {self.author} issued to {self.borrower} on {self.date}\"",
        "FunctionCall": "b1 = IssuedBook(\"HP\", \"Rowling\", \"Harry\", \"2024-01-01\")\nassert b1.get_summary()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "b1 = IssuedBook(\"HP\", \"Rowling\", \"Harry\", \"2024-01-01\")\nassert b1.get_summary() "
                    ],
                    "Output": "HP by Rowling issued to Harry on 2024-01-01"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b2 = IssuedBook(\"LOTR\", \"Tolkien\", \"Sam\", \"2023-12-12\")\nassert b2.get_summary() "
                    ],
                    "Output": "LOTR by Tolkien issued to Sam on 2023-12-12"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b3 = IssuedBook(\"\", \"\", \"\", \"\")\nassert b3.get_summary() "
                    ],
                    "Output": "by  issued to  on"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b5 = IssuedBook(\"A\", \"B\", \"C\", \"D\")\nassert b5.get_summary() "
                    ],
                    "Output": "A by B issued to C on D"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b6 = IssuedBook(\"Book\", \"Author\", \"Reader\", \"Today\")"
                    ],
                    "Output": "assert isinstance(b6.get_summary(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing a school portal. The class Student stores a name and student ID. The Graduate class inherits from Student and adds a degree field. You need a method get_graduate_info() to return all three fields in a string.",
        "Template": "class Student:\n    def __init__(self, name, student_id):\n        pass\n\nclass Graduate(Student):\n    def __init__(self, name, student_id, degree):\n        pass\n\n    def get_graduate_info(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "g = Graduate(\"Alice\", \"S123\", \"MSc Computer Science\")\n    g.get_graduate_info()"
                    ],
                    "Output": "\"Alice (S123) - MSc Computer Science\"",
                    "Explanation": "The graduate's name, ID, and degree are combined into one formatted string."
                }
            }
        ],
        "Ans": "class Student:\n    def __init__(self, name, student_id):\n        self.name = name\n        self.student_id = student_id\n\nclass Graduate(Student):\n    def __init__(self, name, student_id, degree):\n        super().__init__(name, student_id)\n        self.degree = degree\n\n    def get_graduate_info(self):\n        return f\"{self.name} ({self.student_id}) - {self.degree}\"",
        "FunctionCall": "g1 = Graduate(\"Bob\", \"G001\", \"MBA\")\nassert g1.get_graduate_info()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "g1 = Graduate(\"Bob\", \"G001\", \"MBA\")\nassert g1.get_graduate_info() "
                    ],
                    "Output": "Bob (G001) - MBA"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "g2 = Graduate(\"Sam\", \"ID23\", \"M.Tech\")\nassert g2.get_graduate_info() "
                    ],
                    "Output": "Sam (ID23) - M.Tech"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "g3 = Graduate(\"Tom\", \"\", \"PhD\")\nassert g3.get_graduate_info() "
                    ],
                    "Output": "Tom () - PhD"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "g4 = Graduate(\"Jill\", \"S045\", \"\")\nassert g4.get_graduate_info() "
                    ],
                    "Output": "Jill (S045) -"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "g5 = Graduate(\"\", \"S099\", \"MA\")\nassert g5.get_graduate_info() "
                    ],
                    "Output": "(S099) - MA"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "g6 = Graduate(\"John\", \"S100\", \"BA\")"
                    ],
                    "Output": "assert isinstance(g6.get_graduate_info(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're working on an online store. The base class Product has name and price. The derived class DiscountedProduct adds a discount_percent. Implement get_discounted_price() that returns the price after applying the discount.",
        "Template": "class Product:\n    def __init__(self, name, price):\n        pass\n\nclass DiscountedProduct(Product):\n    def __init__(self, name, price, discount_percent):\n        pass\n\n    def get_discounted_price(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "item = DiscountedProduct(\"Laptop\", 50000, 10)\n    item.get_discounted_price()"
                    ],
                    "Output": "45000.0",
                    "Explanation": "10% of 50000 is 5000 → 50000 - 5000 = 45000.0"
                }
            }
        ],
        "Ans": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\nclass DiscountedProduct(Product):\n    def __init__(self, name, price, discount_percent):\n        super().__init__(name, price)\n        self.discount_percent = discount_percent\n\n    def get_discounted_price(self):\n        discount = (self.discount_percent / 100) * self.price\n        return self.price - discount",
        "FunctionCall": "p1 = DiscountedProduct(\"Phone\", 10000, 10)\nassert p1.get_discounted_price()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "p1 = DiscountedProduct(\"Phone\", 10000, 10)\nassert p1.get_discounted_price() "
                    ],
                    "Output": "9000.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p2 = DiscountedProduct(\"TV\", 20000, 0)\nassert p2.get_discounted_price() "
                    ],
                    "Output": "20000.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p3 = DiscountedProduct(\"Shoes\", 5000, 100)\nassert p3.get_discounted_price() "
                    ],
                    "Output": "0.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p4 = DiscountedProduct(\"Bag\", 3000, 25)\nassert p4.get_discounted_price() "
                    ],
                    "Output": "2250.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p6 = DiscountedProduct(\"Pen\", 100, 5)"
                    ],
                    "Output": "assert round(p6.get_discounted_price(), 2) # Expected: 95.0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re building a travel management system. Vehicle stores type and speed. Flight inherits from Vehicle and adds flight number and duration. Create a method flight_summary() that returns all details in one sentence.",
        "Template": "class Vehicle:\n    def __init__(self, vehicle_type, speed):\n        pass\n\nclass Flight(Vehicle):\n    def __init__(self, vehicle_type, speed, flight_number, duration):\n        pass\n\n    def flight_summary(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "f = Flight(\"Airplane\", 600, \"AI202\", 2)\n    f.flight_summary()"
                    ],
                    "Output": "\"Flight AI202 (Airplane) travels at 600 km/h for 2 hours\"",
                    "Explanation": "Details are combined into a human-readable summary."
                }
            }
        ],
        "Ans": "class Vehicle:\n    def __init__(self, vehicle_type, speed):\n        self.vehicle_type = vehicle_type\n        self.speed = speed\n\nclass Flight(Vehicle):\n    def __init__(self, vehicle_type, speed, flight_number, duration):\n        super().__init__(vehicle_type, speed)\n        self.flight_number = flight_number\n        self.duration = duration\n\n    def flight_summary(self):\n        return f\"Flight {self.flight_number} ({self.vehicle_type}) travels at {self.speed} km/h for {self.duration} hours\"",
        "FunctionCall": "f1 = Flight(\"Airbus\", 700, \"A123\", 3)\nassert f1.flight_summary()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "f1 = Flight(\"Airbus\", 700, \"A123\", 3)\nassert f1.flight_summary() "
                    ],
                    "Output": "Flight A123 (Airbus) travels at 700 km/h for 3 hours"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "f6 = Flight(\"Glider\", 80, \"G080\", 6)"
                    ],
                    "Output": "assert \"80\" in f6.flight_summary()"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re creating an HR system. The Employee class stores name and department. A Manager class inherits from it and adds the number of team members they handle. Write a method describe_role() that returns a formatted string with all this information.",
        "Template": "class Employee:\n    def __init__(self, name, department):\n        pass\n\nclass Manager(Employee):\n    def __init__(self, name, department, team_size):\n        pass\n\n    def describe_role(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "m = Manager(\"Rita\", \"Finance\", 5)\n    m.describe_role()"
                    ],
                    "Output": "\"Rita manages 5 people in the Finance department\"",
                    "Explanation": "Combines name, department, and team size into a single line."
                }
            }
        ],
        "Ans": "class Employee:\n    def __init__(self, name, department):\n        self.name = name\n        self.department = department\n\nclass Manager(Employee):\n    def __init__(self, name, department, team_size):\n        super().__init__(name, department)\n        self.team_size = team_size\n\n    def describe_role(self):\n        return f\"{self.name} manages {self.team_size} people in the {self.department} department\"",
        "FunctionCall": "m1 = Manager(\"Tom\", \"IT\", 10)\nassert m1.describe_role()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "m1 = Manager(\"Tom\", \"IT\", 10)\nassert m1.describe_role() "
                    ],
                    "Output": "Tom manages 10 people in the IT department"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m3 = Manager(\"Raj\", \"Admin\", 0)\nassert m3.describe_role() "
                    ],
                    "Output": "Raj manages 0 people in the Admin department"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m6 = Manager(\"A\", \"B\", 2)"
                    ],
                    "Output": "assert isinstance(m6.describe_role(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a game. The Character class has a name and base attack power. The Warrior class inherits from it and adds a strength multiplier. Implement get_attack_power() that returns the attack after multiplying the base with the strength.",
        "Template": "class Character:\n    def __init__(self, name, base_attack):\n        pass\n\nclass Warrior(Character):\n    def __init__(self, name, base_attack, strength):\n        pass\n\n    def get_attack_power(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "w = Warrior(\"Thorin\", 50, 1.5)\n    w.get_attack_power()"
                    ],
                    "Output": "75.0",
                    "Explanation": "Base attack = 50 × 1.5 strength = 75.0"
                }
            }
        ],
        "Ans": "class Character:\n    def __init__(self, name, base_attack):\n        self.name = name\n        self.base_attack = base_attack\n\nclass Warrior(Character):\n    def __init__(self, name, base_attack, strength):\n        super().__init__(name, base_attack)\n        self.strength = strength\n\n    def get_attack_power(self):\n        return self.base_attack * self.strength",
        "FunctionCall": "w1 = Warrior(\"A\", 30, 2)\nassert w1.get_attack_power()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "w1 = Warrior(\"A\", 30, 2)\nassert w1.get_attack_power() "
                    ],
                    "Output": "60"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "w2 = Warrior(\"B\", 0, 10)\nassert w2.get_attack_power() "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "w3 = Warrior(\"C\", 100, 1)\nassert w3.get_attack_power() "
                    ],
                    "Output": "100"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "w4 = Warrior(\"D\", 20, 0.5)\nassert w4.get_attack_power() "
                    ],
                    "Output": "10.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "w6 = Warrior(\"F\", 25, 0)"
                    ],
                    "Output": "assert w6.get_attack_power() # Expected: 0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are building a pet registration system. The class Animal stores species and age. Pet inherits from Animal and adds the owner's name. Write a method describe() to return a sentence about the pet.",
        "Template": "Input:\n    p = Pet(\"Dog\", 3, \"Alice\")\n    p.describe()\n\nOutput:\n    \"Alice owns a 3-year-old Dog\"\n\nExplanation:\n    Combines species, age, and owner into one sentence.",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "p = Pet(\"Dog\", 3, \"Alice\")\n    p.describe()"
                    ],
                    "Output": "\"Alice owns a 3-year-old Dog\"",
                    "Explanation": "Combines species, age, and owner into one sentence."
                }
            }
        ],
        "Ans": "class Animal:\n    def __init__(self, species, age):\n        self.species = species\n        self.age = age\n\nclass Pet(Animal):\n    def __init__(self, species, age, owner):\n        super().__init__(species, age)\n        self.owner = owner\n\n    def describe(self):\n        return f\"{self.owner} owns a {self.age}-year-old {self.species}\"",
        "FunctionCall": "p1 = Pet(\"Cat\", 2, \"Tom\")\nassert p1.describe()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "p1 = Pet(\"Cat\", 2, \"Tom\")\nassert p1.describe() "
                    ],
                    "Output": "Tom owns a 2-year-old Cat"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p3 = Pet(\"Rabbit\", 0, \"Sam\")\nassert p3.describe() "
                    ],
                    "Output": "Sam owns a 0-year-old Rabbit"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p4 = Pet(\"\", 3, \"John\")\nassert p4.describe() "
                    ],
                    "Output": "John owns a 3-year-old"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p5 = Pet(\"Fish\", 5, \"\")\nassert p5.describe() "
                    ],
                    "Output": "owns a 5-year-old Fish"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p6 = Pet(\"Turtle\", 10, \"Lily\")"
                    ],
                    "Output": "assert \"10-year-old Turtle\" in p6.describe()"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re developing a payment system. The class Card has card number and holder name. DebitCard inherits from Card and adds balance. Implement spend(amount) that deducts balance if funds are available, else returns \"Insufficient balance\".",
        "Template": "class Card:\n    def __init__(self, number, holder):\n        pass\n\nclass DebitCard(Card):\n    def __init__(self, number, holder, balance):\n        pass\n\n    def spend(self, amount):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = DebitCard(\"1234\", \"Alex\", 1000)\n    c.spend(400)"
                    ],
                    "Output": "600",
                    "Explanation": "1000 - 400 = 600. Balance is deducted."
                }
            }
        ],
        "Ans": "class Card:\n    def __init__(self, number, holder):\n        self.number = number\n        self.holder = holder\n\nclass DebitCard(Card):\n    def __init__(self, number, holder, balance):\n        super().__init__(number, holder)\n        self.balance = balance\n\n    def spend(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n            return self.balance\n        return \"Insufficient balance\"",
        "FunctionCall": "c = DebitCard(\"1234\", \"Alex\", 1000)\nc.spend(400)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "c1 = DebitCard(\"1\", \"A\", 100)\nassert c1.spend(50) "
                    ],
                    "Output": "50"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c2 = DebitCard(\"2\", \"B\", 0)\nassert c2.spend(1) "
                    ],
                    "Output": "Insufficient balance"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c3 = DebitCard(\"3\", \"C\", 500)\nassert c3.spend(500) "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c4 = DebitCard(\"4\", \"D\", 100)\nc4.spend(60)\nassert c4.spend(50) "
                    ],
                    "Output": "Insufficient balance"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c6 = DebitCard(\"6\", \"F\", 250)\nassert c6.spend(0) "
                    ],
                    "Output": "250"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c7 = DebitCard(\"7\", \"G\", 999)"
                    ],
                    "Output": "c7.spend(999)\nassert c7.balance # Expected: 0"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193302",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re developing an education platform. The class Course stores title and duration. The OnlineCourse class adds platform and instructor. Implement get_details() to return a summary of all attributes.",
        "Template": "class Course:\n    def __init__(self, title, duration):\n        pass\n\nclass OnlineCourse(Course):\n    def __init__(self, title, duration, platform, instructor):\n        pass\n\n    def get_details(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = OnlineCourse(\"Python\", \"6 weeks\", \"Udemy\", \"Alice\")\n    c.get_details()"
                    ],
                    "Output": "\"Python (6 weeks) on Udemy by Alice\"",
                    "Explanation": "Combines course info, platform, and instructor into one sentence."
                }
            }
        ],
        "Ans": "class Course:\n    def __init__(self, title, duration):\n        self.title = title\n        self.duration = duration\n\nclass OnlineCourse(Course):\n    def __init__(self, title, duration, platform, instructor):\n        super().__init__(title, duration)\n        self.platform = platform\n        self.instructor = instructor\n\n    def get_details(self):\n        return f\"{self.title} ({self.duration}) on {self.platform} by {self.instructor}\"",
        "FunctionCall": "c1 = OnlineCourse(\"Java\", \"4 weeks\", \"Coursera\", \"Tom\")\nassert c1.get_details()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "c1 = OnlineCourse(\"Java\", \"4 weeks\", \"Coursera\", \"Tom\")\nassert c1.get_details() "
                    ],
                    "Output": "Java (4 weeks) on Coursera by Tom"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c4 = OnlineCourse(\"Django\", \"\", \"Skillshare\", \"Ana\")\nassert c4.get_details() "
                    ],
                    "Output": "Django () on Skillshare by Ana"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c6 = OnlineCourse(\"HTML\", \"1 week\", \"Codecademy\", \"Eli\")"
                    ],
                    "Output": "assert isinstance(c6.get_details(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing software for a smart device that functions both as a phone and a music player. The Phone class has a method make_call(number) that returns a message. The MusicPlayer class has a method play_song(song) that returns the song being played. A new class SmartDevice should inherit from both and allow the use of both features.",
        "Template": "class Phone:\n    def make_call(self, number):\n        pass\n\nclass MusicPlayer:\n    def play_song(self, song):\n        pass\n\nclass SmartDevice(Phone, MusicPlayer):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "device = SmartDevice()\n    device.make_call(\"9876543210\")\n    device.play_song(\"Believer\")"
                    ],
                    "Output": "\"Calling 9876543210\"\n    \"Playing Believer\"",
                    "Explanation": "Both methods from parent classes work correctly through the SmartDevice class."
                }
            }
        ],
        "Ans": "class Phone:\n    def make_call(self, number):\n        return f\"Calling {number}\"\n\nclass MusicPlayer:\n    def play_song(self, song):\n        return f\"Playing {song}\"\n\nclass SmartDevice(Phone, MusicPlayer):\n    pass",
        "FunctionCall": "s1 = SmartDevice()\nassert s1.make_call(\"123\")",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = SmartDevice()\nassert s1.make_call(\"123\") "
                    ],
                    "Output": "Calling 123"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s2 = SmartDevice()\nassert s2.play_song(\"Imagine\") "
                    ],
                    "Output": "Playing Imagine"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s4 = SmartDevice()\nassert s4.play_song(\"\") "
                    ],
                    "Output": "Playing"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s5 = SmartDevice()\nassert s5.make_call(\"\") "
                    ],
                    "Output": "Calling"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s6 = SmartDevice()"
                    ],
                    "Output": "assert s6.play_song(\"Bohemian Rhapsody\") # Expected: \"Playing Bohemian Rhapsody\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re building an employee system. A Developer has a code() method, and a Designer has a design() method. Create a class HybridWorker that inherits both and returns a message for each skill.",
        "Template": "class Developer:\n    def code(self):\n        pass\n\nclass Designer:\n    def design(self):\n        pass\n\nclass HybridWorker(Developer, Designer):\n    def __init__(self, name):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "worker = HybridWorker(\"Nina\")\n    worker.code()\n    worker.design()"
                    ],
                    "Output": "\"Nina is coding\"\n    \"Nina is designing\"",
                    "Explanation": "The hybrid worker can perform both developer and designer roles."
                }
            }
        ],
        "Ans": "class Developer:\n    def code(self):\n        return f\"{self.name} is coding\"\n\nclass Designer:\n    def design(self):\n        return f\"{self.name} is designing\"\n\nclass HybridWorker(Developer, Designer):\n    def __init__(self, name):\n        self.name = name",
        "FunctionCall": "h1 = HybridWorker(\"Ava\")\nassert h1.code()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "h1 = HybridWorker(\"Ava\")\nassert h1.code() "
                    ],
                    "Output": "Ava is coding"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "h2 = HybridWorker(\"Liam\")\nassert h2.design() "
                    ],
                    "Output": "Liam is designing"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "h6 = HybridWorker(\"Max\")"
                    ],
                    "Output": "assert h6.code() # Expected: \"Max is coding\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re designing a drone simulator. The Flyer class has a method fly(height) and Camera class has take_photo(location). Create a Drone class that inherits from both and can both fly and take photos.",
        "Template": "class Flyer:\n    def fly(self, height):\n        pass\n\nclass Camera:\n    def take_photo(self, location):\n        pass\n\nclass Drone(Flyer, Camera):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "d = Drone()\n    d.fly(100)\n    d.take_photo(\"beach\")"
                    ],
                    "Output": "\"Flying at 100 meters\"\n    \"Photo taken at beach\"",
                    "Explanation": "The drone successfully inherits and uses features from both parent classes."
                }
            }
        ],
        "Ans": "class Flyer:\n    def fly(self, height):\n        return f\"Flying at {height} meters\"\n\nclass Camera:\n    def take_photo(self, location):\n        return f\"Photo taken at {location}\"\n\nclass Drone(Flyer, Camera):\n    pass",
        "FunctionCall": "d1 = Drone()\nassert d1.fly(50)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "d1 = Drone()\nassert d1.fly(50) "
                    ],
                    "Output": "Flying at 50 meters"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d2 = Drone()\nassert d2.take_photo(\"mountain\") "
                    ],
                    "Output": "Photo taken at mountain"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d4 = Drone()\nassert d4.take_photo(\"\") "
                    ],
                    "Output": "Photo taken at"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d5 = Drone()\nassert d5.fly(0) "
                    ],
                    "Output": "Flying at 0 meters"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d6 = Drone()"
                    ],
                    "Output": "assert d6.take_photo(\"river\") # Expected: \"Photo taken at river\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're designing a digital book reader. The Book class has read_page(page) and BatteryPowered class has battery_status(level). The EBookReader class should inherit both and allow reading pages and checking battery.",
        "Template": "class Book:\n    def read_page(self, page):\n        pass\n\nclass BatteryPowered:\n    def battery_status(self, level):\n        pass\n\nclass EBookReader(Book, BatteryPowered):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "reader = EBookReader()\n    reader.read_page(45)\n    reader.battery_status(80)"
                    ],
                    "Output": "\"Reading page 45\"\n    \"Battery at 80%\"",
                    "Explanation": "Combines features of a book and a battery-powered device."
                }
            }
        ],
        "Ans": "class Book:\n    def read_page(self, page):\n        return f\"Reading page {page}\"\n\nclass BatteryPowered:\n    def battery_status(self, level):\n        return f\"Battery at {level}%\"\n\nclass EBookReader(Book, BatteryPowered):\n    pass",
        "FunctionCall": "e1 = EBookReader()\nassert e1.read_page(10)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "e1 = EBookReader()\nassert e1.read_page(10) "
                    ],
                    "Output": "Reading page 10"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e2 = EBookReader()\nassert e2.battery_status(90) "
                    ],
                    "Output": "Battery at 90%"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e3 = EBookReader()\nassert e3.read_page(0) "
                    ],
                    "Output": "Reading page 0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e4 = EBookReader()\nassert e4.battery_status(0) "
                    ],
                    "Output": "Battery at 0%"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e6 = EBookReader()"
                    ],
                    "Output": "assert \"Battery\" in e6.battery_status(55)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're creating a smart assistant. A Speaker class can speak(message) and a Scheduler class can schedule(task, time). SmartAssistant should combine both features to interact and plan.",
        "Template": "class Speaker:\n    def speak(self, message):\n        pass\n\nclass Scheduler:\n    def schedule(self, task, time):\n        pass\n\nclass SmartAssistant(Speaker, Scheduler):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "bot = SmartAssistant()\n    bot.speak(\"Hello\")\n    bot.schedule(\"Meeting\", \"10 AM\")"
                    ],
                    "Output": "\"Speaking: Hello\"\n    \"Scheduled Meeting at 10 AM\"",
                    "Explanation": "The assistant uses both functionalities effectively."
                }
            }
        ],
        "Ans": "class Speaker:\n    def speak(self, message):\n        return f\"Speaking: {message}\"\n\nclass Scheduler:\n    def schedule(self, task, time):\n        return f\"Scheduled {task} at {time}\"\n\nclass SmartAssistant(Speaker, Scheduler):\n    pass",
        "FunctionCall": "s1 = SmartAssistant()\nassert s1.speak(\"Hi\")",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = SmartAssistant()\nassert s1.speak(\"Hi\") "
                    ],
                    "Output": "Speaking: Hi"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s2 = SmartAssistant()\nassert s2.schedule(\"Call\", \"9 AM\") "
                    ],
                    "Output": "Scheduled Call at 9 AM"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s3 = SmartAssistant()\nassert s3.speak(\"\") "
                    ],
                    "Output": "Speaking:"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s4 = SmartAssistant()\nassert s4.schedule(\"Lunch\", \"\") "
                    ],
                    "Output": "Scheduled Lunch at"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s6 = SmartAssistant()"
                    ],
                    "Output": "assert s6.schedule(\"Workout\", \"6 PM\") # Expected: \"Scheduled Workout at 6 PM\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing a simulation for hybrid vehicles. The ElectricVehicle class has a method charge(level), and the GasolineVehicle class has a method refuel(liters). A HybridCar class should inherit both, allowing users to charge and refuel the car.",
        "Template": "class ElectricVehicle:\n    def charge(self, level):\n        pass\n\nclass GasolineVehicle:\n    def refuel(self, liters):\n        pass\n\nclass HybridCar(ElectricVehicle, GasolineVehicle):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "car = HybridCar()\n    car.charge(80)\n    car.refuel(30)"
                    ],
                    "Output": "\"Charging to 80%\"\n    \"Refueling with 30 liters\"",
                    "Explanation": "The car supports both electric and gasoline operations."
                }
            }
        ],
        "Ans": "class ElectricVehicle:\n    def charge(self, level):\n        return f\"Charging to {level}%\"\n\nclass GasolineVehicle:\n    def refuel(self, liters):\n        return f\"Refueling with {liters} liters\"\n\nclass HybridCar(ElectricVehicle, GasolineVehicle):\n    pass",
        "FunctionCall": "h1 = HybridCar()\nassert h1.charge(50)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "h1 = HybridCar()\nassert h1.charge(50) "
                    ],
                    "Output": "Charging to 50%"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "h2 = HybridCar()\nassert h2.refuel(20) "
                    ],
                    "Output": "Refueling with 20 liters"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "h4 = HybridCar()\nassert h4.refuel(0) "
                    ],
                    "Output": "Refueling with 0 liters"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "h6 = HybridCar()"
                    ],
                    "Output": "assert isinstance(h6.refuel(5), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're designing a kitchen appliance system. A Cutter has a method cut(ingredient), and a Mixer has a method mix(ingredients). The FoodProcessor class should inherit both and offer both functionalities.",
        "Template": "class Cutter:\n    def cut(self, ingredient):\n        pass\n\nclass Mixer:\n    def mix(self, ingredients):\n        pass\n\nclass FoodProcessor(Cutter, Mixer):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "fp = FoodProcessor()\n    fp.cut(\"Carrot\")\n    fp.mix([\"Tomato\", \"Onion\"])"
                    ],
                    "Output": "\"Cutting Carrot\"\n    \"Mixing Tomato and Onion\"",
                    "Explanation": "Combines individual cutting and mixing functionality in one appliance."
                }
            }
        ],
        "Ans": "class Cutter:\n    def cut(self, ingredient):\n        return f\"Cutting {ingredient}\"\n\nclass Mixer:\n    def mix(self, ingredients):\n        return f\"Mixing {' and '.join(ingredients)}\"\n\nclass FoodProcessor(Cutter, Mixer):\n    pass",
        "FunctionCall": "fp1 = FoodProcessor()\nassert fp1.cut(\"Potato\")",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "fp1 = FoodProcessor()\nassert fp1.cut(\"Potato\") "
                    ],
                    "Output": "Cutting Potato"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "fp2 = FoodProcessor()\nassert fp2.mix([\"Onion\", \"Pepper\"]) "
                    ],
                    "Output": "Mixing Onion and Pepper"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "fp3 = FoodProcessor()\nassert fp3.mix([\"Apple\"]) "
                    ],
                    "Output": "Mixing Apple"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "fp6 = FoodProcessor()"
                    ],
                    "Output": "assert fp6.mix([]) # Expected: \"Mixing \""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a blogging tool. The Writer class has write(article) and the Photographer class has capture(image_title). The Blogger class inherits from both and can perform both actions.",
        "Template": "class Writer:\n    def write(self, article):\n        pass\n\nclass Photographer:\n    def capture(self, image_title):\n        pass\n\nclass Blogger(Writer, Photographer):\n    def __init__(self, name):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "b = Blogger(\"Chris\")\n    b.write(\"My Travel Story\")\n    b.capture(\"Sunset View\")"
                    ],
                    "Output": "\"Chris wrote an article titled 'My Travel Story'\"\n    \"Chris captured a photo titled 'Sunset View'\"",
                    "Explanation": "Blogger successfully performs both writing and photography."
                }
            }
        ],
        "Ans": "class Writer:\n    def write(self, article):\n        return f\"{self.name} wrote an article titled '{article}'\"\n\nclass Photographer:\n    def capture(self, image_title):\n        return f\"{self.name} captured a photo titled '{image_title}'\"\n\nclass Blogger(Writer, Photographer):\n    def __init__(self, name):\n        self.name = name",
        "FunctionCall": "b1 = Blogger(\"Anna\")\nassert b1.write(\"Nature Walk\")",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "b1 = Blogger(\"Anna\")\nassert b1.write(\"Nature Walk\") "
                    ],
                    "Output": "Anna wrote an article titled 'Nature Walk'"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b2 = Blogger(\"Mark\")\nassert b2.capture(\"City Lights\") "
                    ],
                    "Output": "Mark captured a photo titled 'City Lights'"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b4 = Blogger(\"Ben\")\nassert b4.capture(\"\") "
                    ],
                    "Output": "Ben captured a photo titled ''"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b5 = Blogger(\"Sam\")\nassert b5.write(\"\") "
                    ],
                    "Output": "Sam wrote an article titled ''"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b6 = Blogger(\"Lena\")"
                    ],
                    "Output": "assert \"article\" in b6.write(\"Review\")"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're designing a rescue simulation. FireFighter has extinguish_fire(location) and Medic has provide_aid(patient). A robot class EmergencyBot should handle both emergencies.",
        "Template": "class FireFighter:\n    def extinguish_fire(self, location):\n        pass\n\nclass Medic:\n    def provide_aid(self, patient):\n        pass\n\nclass EmergencyBot(FireFighter, Medic):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "bot = EmergencyBot()\n    bot.extinguish_fire(\"Warehouse\")\n    bot.provide_aid(\"Alice\")"
                    ],
                    "Output": "\"Extinguishing fire at Warehouse\"\n    \"Providing aid to Alice\"",
                    "Explanation": "The bot handles both fire and medical emergencies."
                }
            }
        ],
        "Ans": "class FireFighter:\n    def extinguish_fire(self, location):\n        return f\"Extinguishing fire at {location}\"\n\nclass Medic:\n    def provide_aid(self, patient):\n        return f\"Providing aid to {patient}\"\n\nclass EmergencyBot(FireFighter, Medic):\n    pass",
        "FunctionCall": "e1 = EmergencyBot()\nassert e1.extinguish_fire(\"Building\")",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "e1 = EmergencyBot()\nassert e1.extinguish_fire(\"Building\") "
                    ],
                    "Output": "Extinguishing fire at Building"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e2 = EmergencyBot()\nassert e2.provide_aid(\"Bob\") "
                    ],
                    "Output": "Providing aid to Bob"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e3 = EmergencyBot()\nassert e3.extinguish_fire(\"\") "
                    ],
                    "Output": "Extinguishing fire at"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e4 = EmergencyBot()\nassert e4.provide_aid(\"\") "
                    ],
                    "Output": "Providing aid to"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e6 = EmergencyBot()"
                    ],
                    "Output": "assert \"aid\" in e6.provide_aid(\"Tom\")"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193304",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a fitness tracker. Runner has a method run(distance) and Swimmer has swim(laps). The class Athlete should inherit both and track activity performance.",
        "Template": "class Runner:\n    def run(self, distance):\n        pass\n\nclass Swimmer:\n    def swim(self, laps):\n        pass\n\nclass Athlete(Runner, Swimmer):\n    def __init__(self, name):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "a = Athlete(\"Ravi\")\n    a.run(5)\n    a.swim(20)"
                    ],
                    "Output": "\"Ravi ran 5 km\"\n    \"Ravi swam 20 laps\"",
                    "Explanation": "Athlete performs both running and swimming activities."
                }
            }
        ],
        "Ans": "class Runner:\n    def run(self, distance):\n        return f\"{self.name} ran {distance} km\"\n\nclass Swimmer:\n    def swim(self, laps):\n        return f\"{self.name} swam {laps} laps\"\n\nclass Athlete(Runner, Swimmer):\n    def __init__(self, name):\n        self.name = name",
        "FunctionCall": "a1 = Athlete(\"Lena\")\nassert a1.run(10)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "a1 = Athlete(\"Lena\")\nassert a1.run(10) "
                    ],
                    "Output": "Lena ran 10 km"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a2 = Athlete(\"Mike\")\nassert a2.swim(30) "
                    ],
                    "Output": "Mike swam 30 laps"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a3 = Athlete(\"Nina\")\nassert a3.run(0) "
                    ],
                    "Output": "Nina ran 0 km"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a4 = Athlete(\"Raj\")\nassert a4.swim(0) "
                    ],
                    "Output": "Raj swam 0 laps"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a6 = Athlete(\"Tia\")"
                    ],
                    "Output": "assert \"laps\" in a6.swim(15)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are designing a system for a large organization. The top-level class is Organization, which stores the company name. The Department class inherits from Organization and stores the department name. Finally, the Employee class inherits from Department and stores the employee name. You need to return a full description that includes the employee’s name, department, and company.",
        "Template": "class Organization:\n    def __init__(self, company):\n        pass\n\nclass Department(Organization):\n    def __init__(self, company, dept):\n        pass\n\nclass Employee(Department):\n    def __init__(self, company, dept, emp_name):\n        pass\n\n    def get_details(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "e = Employee(\"TechCorp\", \"IT\", \"Amit\")\n        e.get_details()"
                    ],
                    "Output": "\"Amit works in IT department at TechCorp\"",
                    "Explanation": "This is multilevel inheritance: Employee → Department → Organization. The method collects details from all levels."
                }
            }
        ],
        "Ans": "class Organization:\n    def __init__(self, company):\n        self.company = company\n\nclass Department(Organization):\n    def __init__(self, company, dept):\n        super().__init__(company)\n        self.dept = dept\n\nclass Employee(Department):\n    def __init__(self, company, dept, emp_name):\n        super().__init__(company, dept)\n        self.emp_name = emp_name\n\n    def get_details(self):\n        return f\"{self.emp_name} works in {self.dept} department at {self.company}\"",
        "FunctionCall": "e1 = Employee(\"Innotech\", \"HR\", \"Meera\")\nassert e1.get_details()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "e1 = Employee(\"Innotech\", \"HR\", \"Meera\")\nassert e1.get_details() "
                    ],
                    "Output": "Meera works in HR department at Innotech"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e2 = Employee(\"SoftCorp\", \"Finance\", \"Raj\")\nassert e2.get_details() "
                    ],
                    "Output": "Raj works in Finance department at SoftCorp"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e6 = Employee(\"GreenSoft\", \"QA\", \"\")"
                    ],
                    "Output": "assert e6.get_details() # Expected: \" works in QA department at GreenSoft\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a classification system for animals. The base class Animal defines a category. Mammal inherits from Animal and defines body temperature. Dog inherits from Mammal and defines the breed. You need to return a summary of the dog using attributes from all levels.",
        "Template": "class Animal:\n    def __init__(self, category):\n        pass\n\nclass Mammal(Animal):\n    def __init__(self, category, temperature):\n        pass\n\nclass Dog(Mammal):\n    def __init__(self, category, temperature, breed):\n        pass\n\n    def describe(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "d = Dog(\"Animal\", \"Warm-blooded\", \"Labrador\")\n        d.describe()"
                    ],
                    "Output": "\"This is a Labrador. It is a Warm-blooded Animal.\"",
                    "Explanation": "Dog inherits from Mammal, which in turn inherits from Animal, and each level adds one piece of data."
                }
            }
        ],
        "Ans": "class Animal:\n    def __init__(self, category):\n        self.category = category\n\nclass Mammal(Animal):\n    def __init__(self, category, temperature):\n        super().__init__(category)\n        self.temperature = temperature\n\nclass Dog(Mammal):\n    def __init__(self, category, temperature, breed):\n        super().__init__(category, temperature)\n        self.breed = breed\n\n    def describe(self):\n        return f\"This is a {self.breed}. It is a {self.temperature} {self.category}.\"",
        "FunctionCall": "d1 = Dog(\"Animal\", \"Warm-blooded\", \"Husky\")\nassert d1.describe()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "d1 = Dog(\"Animal\", \"Warm-blooded\", \"Husky\")\nassert d1.describe() "
                    ],
                    "Output": "This is a Husky. It is a Warm-blooded Animal."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d2 = Dog(\"Creature\", \"Cold-blooded\", \"Dachshund\")\nassert d2.describe() "
                    ],
                    "Output": "This is a Dachshund. It is a Cold-blooded Creature."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d4 = Dog(\"\", \"\", \"\")\nassert d4.describe() "
                    ],
                    "Output": "This is a . It is a  ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d6 = Dog(\"Creature\", \"\", \"Beagle\")"
                    ],
                    "Output": "assert d6.describe() # Expected: \"This is a Beagle. It is a  Creature.\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're organizing a book library. The base class Publisher stores the publisher name. The Series class inherits from Publisher and stores series name. The Book class inherits from Series and stores book title. You need a method that returns complete book information.",
        "Template": "class Publisher:\n    def __init__(self, publisher):\n        pass\n\nclass Series(Publisher):\n    def __init__(self, publisher, series_name):\n        pass\n\nclass Book(Series):\n    def __init__(self, publisher, series_name, title):\n        pass\n\n    def info(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "b = Book(\"Penguin\", \"Harry Potter\", \"Chamber of Secrets\")\n        b.info()"
                    ],
                    "Output": "\"Chamber of Secrets is part of the Harry Potter series published by Penguin.\"",
                    "Explanation": "Book → Series → Publisher, and each level contributes one detail."
                }
            }
        ],
        "Ans": "class Publisher:\n    def __init__(self, publisher):\n        self.publisher = publisher\n\nclass Series(Publisher):\n    def __init__(self, publisher, series_name):\n        super().__init__(publisher)\n        self.series_name = series_name\n\nclass Book(Series):\n    def __init__(self, publisher, series_name, title):\n        super().__init__(publisher, series_name)\n        self.title = title\n\n    def info(self):\n        return f\"{self.title} is part of the {self.series_name} series published by {self.publisher}.\"",
        "FunctionCall": "b1 = Book(\"Harper\", \"Earth Saga\", \"Final Planet\")\nassert b1.info()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "b1 = Book(\"Harper\", \"Earth Saga\", \"Final Planet\")\nassert b1.info() "
                    ],
                    "Output": "Final Planet is part of the Earth Saga series published by Harper."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b4 = Book(\"\", \"\", \"\")\nassert b4.info() "
                    ],
                    "Output": "is part of the  series published by ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b5 = Book(\"Hachette\", \"\", \"Bookless\")\nassert b5.info() "
                    ],
                    "Output": "Bookless is part of the  series published by Hachette."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b6 = Book(\"Pearson\", \"Science Stories\", \"\")"
                    ],
                    "Output": "assert b6.info() # Expected: \" is part of the Science Stories series published by Pearson.\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are designing a smart control platform. A System class stores the OS type. The SmartSystem class adds connectivity status. The SmartHome class stores home owner’s name. You need a method to show the full system setup.",
        "Template": "class System:\n    def __init__(self, os_type):\n        pass\n\nclass SmartSystem(System):\n    def __init__(self, os_type, connectivity):\n        pass\n\nclass SmartHome(SmartSystem):\n    def __init__(self, os_type, connectivity, owner):\n        pass\n\n    def status(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "home = SmartHome(\"Linux\", \"Online\", \"Ravi\")\n        home.status()"
                    ],
                    "Output": "\"SmartHome of Ravi is running Linux and is currently Online.\"",
                    "Explanation": "Each level adds a piece of data to form a complete status description."
                }
            }
        ],
        "Ans": "class System:\n    def __init__(self, os_type):\n        self.os_type = os_type\n\nclass SmartSystem(System):\n    def __init__(self, os_type, connectivity):\n        super().__init__(os_type)\n        self.connectivity = connectivity\n\nclass SmartHome(SmartSystem):\n    def __init__(self, os_type, connectivity, owner):\n        super().__init__(os_type, connectivity)\n        self.owner = owner\n\n    def status(self):\n        return f\"SmartHome of {self.owner} is running {self.os_type} and is currently {self.connectivity}.\"",
        "FunctionCall": "sh1 = SmartHome(\"Linux\", \"Online\", \"Ravi\")\nassert sh1.status()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "sh1 = SmartHome(\"Linux\", \"Online\", \"Ravi\")\nassert sh1.status() "
                    ],
                    "Output": "SmartHome of Ravi is running Linux and is currently Online."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "sh3 = SmartHome(\"MacOS\", \"\", \"Eva\")\nassert sh3.status() "
                    ],
                    "Output": "SmartHome of Eva is running MacOS and is currently ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "sh4 = SmartHome(\"\", \"\", \"\")\nassert sh4.status() "
                    ],
                    "Output": "SmartHome of  is running  and is currently ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "sh6 = SmartHome(\"Unix\", \"Disconnected\", \"Rekha\")"
                    ],
                    "Output": "assert \"Disconnected\" in sh6.status()"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re creating a course management system. The Platform class stores the platform name. Course stores the course title. Module stores the module name. You need a method that returns the full module description.",
        "Template": "class Platform:\n    def __init__(self, name):\n        pass\n\nclass Course(Platform):\n    def __init__(self, name, title):\n        pass\n\nclass Module(Course):\n    def __init__(self, name, title, module_name):\n        pass\n\n    def full_title(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "m = Module(\"Udemy\", \"Python Bootcamp\", \"Functions\")\n\tm.full_title()"
                    ],
                    "Output": "\"'Functions' is a module in 'Python Bootcamp' course on Udemy\"",
                    "Explanation": "Multilevel inheritance from Platform → Course → Module."
                }
            }
        ],
        "Ans": "class Platform:\n    def __init__(self, name):\n        self.name = name\n\nclass Course(Platform):\n    def __init__(self, name, title):\n        super().__init__(name)\n        self.title = title\n\nclass Module(Course):\n    def __init__(self, name, title, module_name):\n        super().__init__(name, title)\n        self.module_name = module_name\n\n    def full_title(self):\n        return f\"'{self.module_name}' is a module in '{self.title}' course on {self.name}\"",
        "FunctionCall": "m1 = Module(\"Udemy\", \"Python Bootcamp\", \"Functions\")\nassert m1.full_title()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "m1 = Module(\"Udemy\", \"Python Bootcamp\", \"Functions\")\nassert m1.full_title() "
                    ],
                    "Output": "'Functions' is a module in 'Python Bootcamp' course on Udemy"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m3 = Module(\"\", \"\", \"\")\nassert m3.full_title() "
                    ],
                    "Output": "'' is a module in '' course on"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m6 = Module(\"Skillshare\", \"\", \"Basics\")"
                    ],
                    "Output": "assert \"'Basics'\" in m6.full_title()"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are building a hospital management system. The base class Hospital stores the hospital name. The Department class inherits from Hospital and stores the department name. Finally, the Doctor class inherits from Department and stores the doctor's name and returns a full description of the doctor’s workplace.",
        "Template": "class Hospital:\n    def __init__(self, name):\n        pass\n\nclass Department(Hospital):\n    def __init__(self, name, dept):\n        pass\n\nclass Doctor(Department):\n    def __init__(self, name, dept, doctor_name):\n        pass\n\n    def get_info(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "d = Doctor(\"CityCare\", \"Cardiology\", \"Dr. Sharma\")\n\td.get_info()"
                    ],
                    "Output": "\"Dr. Sharma works in the Cardiology department at CityCare hospital.\"",
                    "Explanation": "Multilevel inheritance is used to collect values from Hospital → Department → Doctor."
                }
            }
        ],
        "Ans": "class Hospital:\n    def __init__(self, name):\n        self.name = name\n\nclass Department(Hospital):\n    def __init__(self, name, dept):\n        super().__init__(name)\n        self.dept = dept\n\nclass Doctor(Department):\n    def __init__(self, name, dept, doctor_name):\n        super().__init__(name, dept)\n        self.doctor_name = doctor_name\n\n    def get_info(self):\n        return f\"{self.doctor_name} works in the {self.dept} department at {self.name} hospital.\"",
        "FunctionCall": "d1 = Doctor(\"CityCare\", \"Cardiology\", \"Dr. Sharma\")\nassert d1.get_info()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "d1 = Doctor(\"CityCare\", \"Cardiology\", \"Dr. Sharma\")\nassert d1.get_info() "
                    ],
                    "Output": "Dr. Sharma works in the Cardiology department at CityCare hospital."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d4 = Doctor(\"\", \"\", \"\")\nassert d4.get_info() "
                    ],
                    "Output": "works in the  department at  hospital."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d6 = Doctor(\"CarePlus\", \"Dermatology\", \"Dr. Ana\")"
                    ],
                    "Output": "assert isinstance(d6.get_info(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re designing an airline booking system. The base class Airline stores the airline name. The Flight class adds the flight number. The Passenger class adds the passenger name. You need to return a full booking description.",
        "Template": "class Airline:\n    def __init__(self, airline):\n        pass\n\nclass Flight(Airline):\n    def __init__(self, airline, flight_no):\n        pass\n\nclass Passenger(Flight):\n    def __init__(self, airline, flight_no, passenger_name):\n        pass\n\n    def booking_info(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "p = Passenger(\"IndiGo\", \"6E102\", \"Rahul\")\n\tp.booking_info()"
                    ],
                    "Output": "\"Rahul is booked on flight 6E102 by IndiGo airline.\"",
                    "Explanation": "This forms a full travel detail string from Airline → Flight → Passenger."
                }
            }
        ],
        "Ans": "class Airline:\n    def __init__(self, airline):\n        self.airline = airline\n\nclass Flight(Airline):\n    def __init__(self, airline, flight_no):\n        super().__init__(airline)\n        self.flight_no = flight_no\n\nclass Passenger(Flight):\n    def __init__(self, airline, flight_no, passenger_name):\n        super().__init__(airline, flight_no)\n        self.passenger_name = passenger_name\n\n    def booking_info(self):\n        return f\"{self.passenger_name} is booked on flight {self.flight_no} by {self.airline} airline.\"",
        "FunctionCall": "p1 = Passenger(\"IndiGo\", \"6E102\", \"Rahul\")\nassert p1.booking_info()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "p1 = Passenger(\"IndiGo\", \"6E102\", \"Rahul\")\nassert p1.booking_info() "
                    ],
                    "Output": "Rahul is booked on flight 6E102 by IndiGo airline."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p3 = Passenger(\"SpiceJet\", \"\", \"Ravi\")\nassert p3.booking_info() "
                    ],
                    "Output": "Ravi is booked on flight  by SpiceJet airline."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p4 = Passenger(\"\", \"\", \"\")\nassert p4.booking_info() "
                    ],
                    "Output": "is booked on flight  by  airline."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p7 = Passenger(\"IndiGo\", \"6E303\", \"\")"
                    ],
                    "Output": "assert p7.booking_info() # Expected: \" is booked on flight 6E303 by IndiGo airline.\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re creating a system to track university staff. The base class University holds the university name. Faculty stores the faculty (like Engineering). Professor holds the professor name. Return a full summary string.",
        "Template": "class University:\n    def __init__(self, uni_name):\n        pass\n\nclass Faculty(University):\n    def __init__(self, uni_name, faculty_name):\n        pass\n\nclass Professor(Faculty):\n    def __init__(self, uni_name, faculty_name, prof_name):\n        pass\n\n    def profile(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "p = Professor(\"IIT\", \"Engineering\", \"Dr. Verma\")\n\tp.profile()"
                    ],
                    "Output": "\"Dr. Verma belongs to the Engineering faculty of IIT.\"",
                    "Explanation": "The method fetches and combines info across 3 levels."
                }
            }
        ],
        "Ans": "class University:\n    def __init__(self, uni_name):\n        self.uni_name = uni_name\n\nclass Faculty(University):\n    def __init__(self, uni_name, faculty_name):\n        super().__init__(uni_name)\n        self.faculty_name = faculty_name\n\nclass Professor(Faculty):\n    def __init__(self, uni_name, faculty_name, prof_name):\n        super().__init__(uni_name, faculty_name)\n        self.prof_name = prof_name\n\n    def profile(self):\n        return f\"{self.prof_name} belongs to the {self.faculty_name} faculty of {self.uni_name}.\"",
        "FunctionCall": "p1 = Professor(\"IIT\", \"Engineering\", \"Dr. Verma\")\nassert p1.profile()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "p1 = Professor(\"IIT\", \"Engineering\", \"Dr. Verma\")\nassert p1.profile() "
                    ],
                    "Output": "Dr. Verma belongs to the Engineering faculty of IIT."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p3 = Professor(\"MIT\", \"Arts\", \"\")\nassert p3.profile() "
                    ],
                    "Output": "belongs to the Arts faculty of MIT."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p4 = Professor(\"\", \"\", \"\")\nassert p4.profile() "
                    ],
                    "Output": "belongs to the  faculty of ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p6 = Professor(\"CalTech\", \"Physics\", \"Dr. Raman\")"
                    ],
                    "Output": "assert \"CalTech\" in p6.profile()"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re designing an animal management system. Zoo stores the zoo name. Enclosure stores the enclosure name (e.g., “Savannah”). Animal stores the animal name. The system should describe where each animal is located.",
        "Template": "class Zoo:\n    def __init__(self, zoo_name):\n        pass\n\nclass Enclosure(Zoo):\n    def __init__(self, zoo_name, enc_name):\n        pass\n\nclass Animal(Enclosure):\n    def __init__(self, zoo_name, enc_name, animal_name):\n        pass\n\n    def describe(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "a = Animal(\"Delhi Zoo\", \"Savannah\", \"Lion\")\n\ta.describe()"
                    ],
                    "Output": "\"Lion is in the Savannah enclosure of Delhi Zoo.\"",
                    "Explanation": "Each level contributes one component of the animal’s location."
                }
            }
        ],
        "Ans": "class Zoo:\n    def __init__(self, zoo_name):\n        self.zoo_name = zoo_name\n\nclass Enclosure(Zoo):\n    def __init__(self, zoo_name, enc_name):\n        super().__init__(zoo_name)\n        self.enc_name = enc_name\n\nclass Animal(Enclosure):\n    def __init__(self, zoo_name, enc_name, animal_name):\n        super().__init__(zoo_name, enc_name)\n        self.animal_name = animal_name\n\n    def describe(self):\n        return f\"{self.animal_name} is in the {self.enc_name} enclosure of {self.zoo_name}.\"",
        "FunctionCall": "a1 = Animal(\"Delhi Zoo\", \"Savannah\", \"Lion\")\nassert a1.describe()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "a1 = Animal(\"Delhi Zoo\", \"Savannah\", \"Lion\")\nassert a1.describe() "
                    ],
                    "Output": "Lion is in the Savannah enclosure of Delhi Zoo."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a3 = Animal(\"Mumbai Zoo\", \"Birds\", \"\")\nassert a3.describe() "
                    ],
                    "Output": "is in the Birds enclosure of Mumbai Zoo."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a4 = Animal(\"\", \"\", \"\")\nassert a4.describe() "
                    ],
                    "Output": "is in the  enclosure of ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a6 = Animal(\"Chennai Zoo\", \"\", \"Elephant\")"
                    ],
                    "Output": "assert a6.describe() # Expected: \"Elephant is in the  enclosure of Chennai Zoo.\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193303",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re designing an e-commerce platform. The base class Website stores the platform name (like “ShopEasy”). The Category class inherits from Website and stores a category name (like “Electronics”). The Product class stores the product name. You need to return a string that represents where the product belongs.",
        "Template": "class Website:\n    def __init__(self, name):\n        pass\n\nclass Category(Website):\n    def __init__(self, name, category):\n        pass\n\nclass Product(Category):\n    def __init__(self, name, category, product_name):\n        pass\n\n    def location(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "p = Product(\"ShopEasy\", \"Electronics\", \"Smartphone\")\n\tp.location()"
                    ],
                    "Output": "\"Smartphone is listed under Electronics category on ShopEasy.\"",
                    "Explanation": "This structure uses multilevel inheritance to combine all class attributes into a single string."
                }
            }
        ],
        "Ans": "class Website:\n    def __init__(self, name):\n        self.name = name\n\nclass Category(Website):\n    def __init__(self, name, category):\n        super().__init__(name)\n        self.category = category\n\nclass Product(Category):\n    def __init__(self, name, category, product_name):\n        super().__init__(name, category)\n        self.product_name = product_name\n\n    def location(self):\n        return f\"{self.product_name} is listed under {self.category} category on {self.name}.\"",
        "FunctionCall": "p1 = Product(\"ShopEasy\", \"Electronics\", \"Smartphone\")\nassert p1.location()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "p1 = Product(\"ShopEasy\", \"Electronics\", \"Smartphone\")\nassert p1.location() "
                    ],
                    "Output": "Smartphone is listed under Electronics category on ShopEasy."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p3 = Product(\"MyStore\", \"\", \"Notebook\")\nassert p3.location() "
                    ],
                    "Output": "Notebook is listed under  category on MyStore."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p4 = Product(\"\", \"\", \"\")\nassert p4.location() "
                    ],
                    "Output": "is listed under  category on ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p6 = Product(\"DealsKart\", \"Books\", \"Python Guide\")"
                    ],
                    "Output": "assert p6.location().endswith(\"DealsKart.\")"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re developing a school management system. A base class Person stores a name and age. The Student class inherits from Person and adds a grade. The Teacher class inherits from Person and adds a subject. Implement methods in each subclass to describe their roles.",
        "Template": "class Person:\n    def __init__(self, name, age):\n        pass\n\nclass Student(Person):\n    def __init__(self, name, age, grade):\n        pass\n\n    def get_details(self):\n        pass\n\nclass Teacher(Person):\n    def __init__(self, name, age, subject):\n        pass\n\n    def get_details(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = Student(\"Asha\", 15, \"10th\")\n\tt = Teacher(\"Mr. Roy\", 40, \"Mathematics\")\n\ts.get_details()\n\tt.get_details()"
                    ],
                    "Output": "\"Asha is 15 years old and studies in 10th grade.\"\n\t\"Mr. Roy is 40 years old and teaches Mathematics.\"",
                    "Explanation": "Both Student and Teacher inherit the common attributes from Person and add their specific functionality."
                }
            }
        ],
        "Ans": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nclass Student(Person):\n    def __init__(self, name, age, grade):\n        super().__init__(name, age)\n        self.grade = grade\n\n    def get_details(self):\n        return f\"{self.name} is {self.age} years old and studies in {self.grade} grade.\"\n\nclass Teacher(Person):\n    def __init__(self, name, age, subject):\n        super().__init__(name, age)\n        self.subject = subject\n\n    def get_details(self):\n        return f\"{self.name} is {self.age} years old and teaches {self.subject}.\"",
        "FunctionCall": "s1 = Student(\"Asha\", 15, \"10th\")\nassert s1.get_details()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = Student(\"Asha\", 15, \"10th\")\nassert s1.get_details() "
                    ],
                    "Output": "Asha is 15 years old and studies in 10th grade."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "t1 = Teacher(\"Mr. Roy\", 40, \"Mathematics\")\nassert t1.get_details() "
                    ],
                    "Output": "Mr. Roy is 40 years old and teaches Mathematics."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s3 = Student(\"Nina\", 0, \"\")\nassert s3.get_details() "
                    ],
                    "Output": "Nina is 0 years old and studies in  grade."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "t3 = Teacher(\"\", 0, \"\")"
                    ],
                    "Output": "assert t3.get_details() # Expected: \" is 0 years old and teaches .\""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re designing a vehicle registry system. The base class Vehicle stores the brand and model. The Car class inherits and adds number of doors. The Bike class inherits and adds engine capacity. Implement methods to return detailed descriptions.",
        "Template": "class Vehicle:\n    def __init__(self, brand, model):\n        pass\n\nclass Car(Vehicle):\n    def __init__(self, brand, model, doors):\n        pass\n\n    def description(self):\n        pass\n\nclass Bike(Vehicle):\n    def __init__(self, brand, model, engine):\n        pass\n\n    def description(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = Car(\"Toyota\", \"Camry\", 4)\n\tb = Bike(\"Yamaha\", \"FZ\", \"150cc\")\n\tc.description()\n\tb.description()"
                    ],
                    "Output": "\"Toyota Camry with 4 doors.\"\n\t\"Yamaha FZ with 150cc engine.\"",
                    "Explanation": "Both Car and Bike use common vehicle data and enrich it with their respective attributes."
                }
            }
        ],
        "Ans": "class Vehicle:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model\n\nclass Car(Vehicle):\n    def __init__(self, brand, model, doors):\n        super().__init__(brand, model)\n        self.doors = doors\n\n    def description(self):\n        return f\"{self.brand} {self.model} with {self.doors} doors.\"\n\nclass Bike(Vehicle):\n    def __init__(self, brand, model, engine):\n        super().__init__(brand, model)\n        self.engine = engine\n\n    def description(self):\n        return f\"{self.brand} {self.model} with {self.engine} engine.\"",
        "FunctionCall": "c1 = Car(\"Toyota\", \"Camry\", 4)\nassert c1.description()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "c1 = Car(\"Toyota\", \"Camry\", 4)\nassert c1.description() "
                    ],
                    "Output": "Toyota Camry with 4 doors."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b1 = Bike(\"Yamaha\", \"FZ\", \"150cc\")\nassert b1.description() "
                    ],
                    "Output": "Yamaha FZ with 150cc engine."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c3 = Car(\"\", \"\", 2)\nassert c3.description() "
                    ],
                    "Output": "with 2 doors."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b3 = Bike(\"Bajaj\", \"Pulsar\", \"220cc\")"
                    ],
                    "Output": "assert isinstance(b3.description(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re creating an employee management system. A base class Person stores the name and employee ID. The Manager class inherits from Person and includes the department. The Engineer class inherits from Person and includes the specialization. Each role should return a proper description.",
        "Template": "class Person:\n    def __init__(self, name, emp_id):\n        pass\n\nclass Manager(Person):\n    def __init__(self, name, emp_id, department):\n        pass\n\n    def get_profile(self):\n        pass\n\nclass Engineer(Person):\n    def __init__(self, name, emp_id, specialization):\n        pass\n\n    def get_profile(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "m = Manager(\"Kavita\", 101, \"HR\")\n\te = Engineer(\"Ravi\", 102, \"Software\")\n\tm.get_profile()\n\te.get_profile()"
                    ],
                    "Output": "\"Kavita (ID: 101) is a manager of HR department.\"\n\t\"Ravi (ID: 102) is a software engineer.\"",
                    "Explanation": "Both child classes use common attributes (name, ID) from the parent and add their own logic."
                }
            }
        ],
        "Ans": "class Person:\n    def __init__(self, name, emp_id):\n        self.name = name\n        self.emp_id = emp_id\n\nclass Manager(Person):\n    def __init__(self, name, emp_id, department):\n        super().__init__(name, emp_id)\n        self.department = department\n\n    def get_profile(self):\n        return f\"{self.name} (ID: {self.emp_id}) is a manager of {self.department} department.\"\n\nclass Engineer(Person):\n    def __init__(self, name, emp_id, specialization):\n        super().__init__(name, emp_id)\n        self.specialization = specialization\n\n    def get_profile(self):\n        return f\"{self.name} (ID: {self.emp_id}) is a {self.specialization.lower()} engineer.\"",
        "FunctionCall": "m1 = Manager(\"Kavita\", 101, \"HR\")\nassert m1.get_profile()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "m1 = Manager(\"Kavita\", 101, \"HR\")\nassert m1.get_profile() "
                    ],
                    "Output": "Kavita (ID: 101) is a manager of HR department."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e1 = Engineer(\"Ravi\", 102, \"Software\")\nassert e1.get_profile() "
                    ],
                    "Output": "Ravi (ID: 102) is a software engineer."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m2 = Manager(\"\", 0, \"\")\nassert m2.get_profile() "
                    ],
                    "Output": "(ID: 0) is a manager of  department."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e2 = Engineer(\"John\", 103, \"\")\nassert e2.get_profile() "
                    ],
                    "Output": "John (ID: 103) is a  engineer."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m4 = Manager(\"Kiran\", 100, \"Admin\")"
                    ],
                    "Output": "assert isinstance(m4.get_profile(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are building a library system. The base class Book stores the title and author. The Novel class adds a genre. The Magazine class adds an issue number. Each type should return its details in a specific format.",
        "Template": "class Book:\n    def __init__(self, title, author):\n        pass\n\nclass Novel(Book):\n    def __init__(self, title, author, genre):\n        pass\n\n    def details(self):\n        pass\n\nclass Magazine(Book):\n    def __init__(self, title, author, issue):\n        pass\n\n    def details(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "n = Novel(\"The Alchemist\", \"Paulo Coelho\", \"Fiction\")\n\tm = Magazine(\"Tech Times\", \"Editor Team\", \"August 2025\")\n\tn.details()\n\tm.details()"
                    ],
                    "Output": "\"'The Alchemist' by Paulo Coelho is a Fiction novel.\"\n\t\"'Tech Times' by Editor Team, Issue: August 2025.\"",
                    "Explanation": "The format of output differs depending on whether the book is a novel or magazine."
                }
            }
        ],
        "Ans": "class Book:\n    def __init__(self, title, author):\n        self.title = title\n        self.author = author\n\nclass Novel(Book):\n    def __init__(self, title, author, genre):\n        super().__init__(title, author)\n        self.genre = genre\n\n    def details(self):\n        return f\"'{self.title}' by {self.author} is a {self.genre} novel.\"\n\nclass Magazine(Book):\n    def __init__(self, title, author, issue):\n        super().__init__(title, author)\n        self.issue = issue\n\n    def details(self):\n        return f\"'{self.title}' by {self.author}, Issue: {self.issue}.\"",
        "FunctionCall": "n1 = Novel(\"The Alchemist\", \"Paulo Coelho\", \"Fiction\")\nassert n1.details()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "n1 = Novel(\"The Alchemist\", \"Paulo Coelho\", \"Fiction\")\nassert n1.details() "
                    ],
                    "Output": "'The Alchemist' by Paulo Coelho is a Fiction novel."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m1 = Magazine(\"Tech Times\", \"Editor Team\", \"August 2025\")\nassert m1.details() "
                    ],
                    "Output": "'Tech Times' by Editor Team, Issue: August 2025."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "n2 = Novel(\"1984\", \"George Orwell\", \"\")\nassert n2.details() "
                    ],
                    "Output": "'1984' by George Orwell is a  novel."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "n3 = Novel(\"\", \"\", \"\")\nassert n3.details() "
                    ],
                    "Output": "'' by  is a  novel."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m3 = Magazine(\"\", \"\", \"\")\nassert m3.details() "
                    ],
                    "Output": "'' by , Issue: ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "n4 = Novel(\"Brave New World\", \"Aldous Huxley\", \"Sci-Fi\")"
                    ],
                    "Output": "assert \"Sci-Fi\" in n4.details()"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing an online learning platform. The base class User stores a name and email. The Instructor class inherits from User and adds the course taught. The Learner class inherits from User and adds the course enrolled. Each should return a role-specific description.",
        "Template": "class User:\n    def __init__(self, name, email):\n        pass\n\nclass Instructor(User):\n    def __init__(self, name, email, course):\n        pass\n\n    def role(self):\n        pass\n\nclass Learner(User):\n    def __init__(self, name, email, course):\n        pass\n\n    def role(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "i = Instructor(\"Arjun\", \"arjun@edu.com\", \"Python\")\n\tl = Learner(\"Neha\", \"neha@edu.com\", \"Python\")\n\ti.role()\n\tl.role()"
                    ],
                    "Output": "\"Arjun (arjun@edu.com) teaches Python.\"\n\t\"Neha (neha@edu.com) is enrolled in Python.\"",
                    "Explanation": "Both Instructor and Learner use shared data from User and add role-specific logic."
                }
            }
        ],
        "Ans": "class User:\n    def __init__(self, name, email):\n        self.name = name\n        self.email = email\n\nclass Instructor(User):\n    def __init__(self, name, email, course):\n        super().__init__(name, email)\n        self.course = course\n\n    def role(self):\n        return f\"{self.name} ({self.email}) teaches {self.course}.\"\n\nclass Learner(User):\n    def __init__(self, name, email, course):\n        super().__init__(name, email)\n        self.course = course\n\n    def role(self):\n        return f\"{self.name} ({self.email}) is enrolled in {self.course}.\"",
        "FunctionCall": "i1 = Instructor(\"Arjun\", \"arjun@edu.com\", \"Python\")\nassert i1.role()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "i1 = Instructor(\"Arjun\", \"arjun@edu.com\", \"Python\")\nassert i1.role() "
                    ],
                    "Output": "Arjun (arjun@edu.com) teaches Python."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "l1 = Learner(\"Neha\", \"neha@edu.com\", \"Python\")\nassert l1.role() "
                    ],
                    "Output": "Neha (neha@edu.com) is enrolled in Python."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "i2 = Instructor(\"Sara\", \"\", \"Data Science\")\nassert i2.role() "
                    ],
                    "Output": "Sara () teaches Data Science."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "l2 = Learner(\"\", \"learner@edu.com\", \"\")\nassert l2.role() "
                    ],
                    "Output": "(learner@edu.com) is enrolled in ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "i4 = Instructor(\"John\", \"\", \"\")"
                    ],
                    "Output": "assert i4.role().startswith(\"John\")"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re building a hospital management system. The base class Person stores name and age. Doctor adds specialization, while Patient adds illness. You need to return different descriptions for each.",
        "Template": "class Person:\n    def __init__(self, name, age):\n        pass\n\nclass Doctor(Person):\n    def __init__(self, name, age, specialization):\n        pass\n\n    def info(self):\n        pass\n\nclass Patient(Person):\n    def __init__(self, name, age, illness):\n        pass\n\n    def info(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "d = Doctor(\"Dr. Meera\", 45, \"Cardiology\")\n\tp = Patient(\"Ankit\", 30, \"Flu\")\n\td.info()\n\tp.info()"
                    ],
                    "Output": "\"Dr. Meera, age 45, specializes in Cardiology.\"\n\t\"Ankit, age 30, is suffering from Flu.\"",
                    "Explanation": "Doctor and Patient reuse common Person data and customize the output."
                }
            }
        ],
        "Ans": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nclass Doctor(Person):\n    def __init__(self, name, age, specialization):\n        super().__init__(name, age)\n        self.specialization = specialization\n\n    def info(self):\n        return f\"{self.name}, age {self.age}, specializes in {self.specialization}.\"\n\nclass Patient(Person):\n    def __init__(self, name, age, illness):\n        super().__init__(name, age)\n        self.illness = illness\n\n    def info(self):\n        return f\"{self.name}, age {self.age}, is suffering from {self.illness}.\"",
        "FunctionCall": "d1 = Doctor(\"Dr. Meera\", 45, \"Cardiology\")\nassert d1.info()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "d1 = Doctor(\"Dr. Meera\", 45, \"Cardiology\")\nassert d1.info() "
                    ],
                    "Output": "Dr. Meera, age 45, specializes in Cardiology."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p1 = Patient(\"Ankit\", 30, \"Flu\")\nassert p1.info() "
                    ],
                    "Output": "Ankit, age 30, is suffering from Flu."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "p2 = Patient(\"\", 0, \"\")\nassert p2.info() "
                    ],
                    "Output": ", age 0, is suffering from ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d4 = Doctor(\"Dr. Asha\", 38, \"Pediatrics\")"
                    ],
                    "Output": "assert isinstance(d4.info(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re developing a media library. The base class Media contains the title and year. Song adds artist, while Movie adds director. Implement methods that display the complete information.",
        "Template": "class Media:\n    def __init__(self, title, year):\n        pass\n\nclass Song(Media):\n    def __init__(self, title, year, artist):\n        pass\n\n    def details(self):\n        pass\n\nclass Movie(Media):\n    def __init__(self, title, year, director):\n        pass\n\n    def details(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = Song(\"Believer\", 2017, \"Imagine Dragons\")\n\tm = Movie(\"Inception\", 2010, \"Christopher Nolan\")\n\ts.details()\n\tm.details()"
                    ],
                    "Output": "\"'Believer' (2017) by Imagine Dragons\"\n\t\"'Inception' (2010) directed by Christopher Nolan\"",
                    "Explanation": "Different subclasses format the data differently based on media type."
                }
            }
        ],
        "Ans": "class Media:\n    def __init__(self, title, year):\n        self.title = title\n        self.year = year\n\nclass Song(Media):\n    def __init__(self, title, year, artist):\n        super().__init__(title, year)\n        self.artist = artist\n\n    def details(self):\n        return f\"'{self.title}' ({self.year}) by {self.artist}\"\n\nclass Movie(Media):\n    def __init__(self, title, year, director):\n        super().__init__(title, year)\n        self.director = director\n\n    def details(self):\n        return f\"'{self.title}' ({self.year}) directed by {self.director}\"",
        "FunctionCall": "s1 = Song(\"Believer\", 2017, \"Imagine Dragons\")\nassert s1.details()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = Song(\"Believer\", 2017, \"Imagine Dragons\")\nassert s1.details() "
                    ],
                    "Output": "'Believer' (2017) by Imagine Dragons"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m1 = Movie(\"Inception\", 2010, \"Christopher Nolan\")\nassert m1.details() "
                    ],
                    "Output": "'Inception' (2010) directed by Christopher Nolan"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "m3 = Movie(\"\", 0, \"\")"
                    ],
                    "Output": "assert m3.details() # Expected: \"'' (0) directed by \""
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a notification system. A base class Notification stores the recipient. The SMS class inherits and adds the phone number and message. The Email class inherits and adds subject and body. Both should return how the notification is sent.",
        "Template": "class Notification:\n    def __init__(self, recipient):\n        pass\n\nclass SMS(Notification):\n    def __init__(self, recipient, phone, message):\n        pass\n\n    def send(self):\n        pass\n\nclass Email(Notification):\n    def __init__(self, recipient, subject, body):\n        pass\n\n    def send(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "sms = SMS(\"Ravi\", \"9876543210\", \"Your OTP is 123456\")\n\temail = Email(\"Meera\", \"Welcome\", \"Thank you for registering.\")\n\tsms.send()\n\temail.send()"
                    ],
                    "Output": "\"Sending SMS to Ravi at 9876543210: Your OTP is 123456\"\n\t\"Sending Email to Meera | Subject: Welcome | Body: Thank you for registering.\"",
                    "Explanation": "Each child class provides a custom message for sending a notification, while using the recipient name from the base class."
                }
            }
        ],
        "Ans": "class Notification:\n    def __init__(self, recipient):\n        self.recipient = recipient\n\nclass SMS(Notification):\n    def __init__(self, recipient, phone, message):\n        super().__init__(recipient)\n        self.phone = phone\n        self.message = message\n\n    def send(self):\n        return f\"Sending SMS to {self.recipient} at {self.phone}: {self.message}\"\n\nclass Email(Notification):\n    def __init__(self, recipient, subject, body):\n        super().__init__(recipient)\n        self.subject = subject\n        self.body = body\n\n    def send(self):\n        return f\"Sending Email to {self.recipient} | Subject: {self.subject} | Body: {self.body}\"",
        "FunctionCall": "sms1 = SMS(\"Ravi\", \"9876543210\", \"Your OTP is 123456\")\nassert sms1.send()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "sms1 = SMS(\"Ravi\", \"9876543210\", \"Your OTP is 123456\")\nassert sms1.send() "
                    ],
                    "Output": "Sending SMS to Ravi at 9876543210: Your OTP is 123456"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "email1 = Email(\"Meera\", \"Welcome\", \"Thank you for registering.\")\nassert email1.send() "
                    ],
                    "Output": "Sending Email to Meera | Subject: Welcome | Body: Thank you for registering."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "sms2 = SMS(\"Ali\", \"\", \"\")\nassert sms2.send() "
                    ],
                    "Output": "Sending SMS to Ali at :"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "email2 = Email(\"\", \"\", \"\")\nassert email2.send() "
                    ],
                    "Output": "Sending Email to  | Subject:  | Body:"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "email3 = Email(\"John\", \"Notice\", \"This is an update.\")"
                    ],
                    "Output": "assert \"Notice\" in email3.send()"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re designing an e-commerce system. A base class Product contains product name and price. Clothing adds size and brand. Electronics adds warranty and manufacturer. Each should return a formatted description.",
        "Template": "class Product:\n    def __init__(self, name, price):\n        pass\n\nclass Clothing(Product):\n    def __init__(self, name, price, size, brand):\n        pass\n\n    def describe(self):\n        pass\n\nclass Electronics(Product):\n    def __init__(self, name, price, warranty, manufacturer):\n        pass\n\n    def describe(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = Clothing(\"T-shirt\", 499, \"L\", \"Puma\")\n    e = Electronics(\"Laptop\", 55000, \"2 years\", \"Dell\")\n    c.describe()\n    e.describe()"
                    ],
                    "Output": "\"T-shirt (L) by Puma costs ₹499.\"\n    \"Laptop by Dell with 2 years warranty costs ₹55000.\"",
                    "Explanation": "The output varies based on product type using shared and unique attributes."
                }
            }
        ],
        "Ans": "class Product:\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n\nclass Clothing(Product):\n    def __init__(self, name, price, size, brand):\n        super().__init__(name, price)\n        self.size = size\n        self.brand = brand\n\n    def describe(self):\n        return f\"{self.name} ({self.size}) by {self.brand} costs ₹{self.price}.\"\n\nclass Electronics(Product):\n    def __init__(self, name, price, warranty, manufacturer):\n        super().__init__(name, price)\n        self.warranty = warranty\n        self.manufacturer = manufacturer\n\n    def describe(self):\n        return f\"{self.name} by {self.manufacturer} with {self.warranty} warranty costs ₹{self.price}.\"",
        "FunctionCall": "c1 = Clothing(\"T-shirt\", 499, \"L\", \"Puma\")\nassert c1.describe()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "c1 = Clothing(\"T-shirt\", 499, \"L\", \"Puma\")\nassert c1.describe() "
                    ],
                    "Output": "T-shirt (L) by Puma costs ₹499."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e1 = Electronics(\"Laptop\", 55000, \"2 years\", \"Dell\")\nassert e1.describe() "
                    ],
                    "Output": "Laptop by Dell with 2 years warranty costs ₹55000."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c2 = Clothing(\"\", 0, \"\", \"\")\nassert c2.describe() "
                    ],
                    "Output": "() by  costs ₹0."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e3 = Electronics(\"Phone\", 15000, \"1 year\", \"Samsung\")"
                    ],
                    "Output": "assert isinstance(e3.describe(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193305",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You’re developing a restaurant management system. A base class Person contains the name. The Chef class inherits from Person and adds the dish they cook. The Customer class inherits from Person and adds the dish they ordered. Both classes should provide role-specific messages.",
        "Template": "class Person:\n    def __init__(self, name):\n        pass\n\nclass Chef(Person):\n    def __init__(self, name, dish):\n        pass\n\n    def activity(self):\n        pass\n\nclass Customer(Person):\n    def __init__(self, name, order):\n        pass\n\n    def activity(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = Chef(\"Vikas\", \"Pasta\")\n    u = Customer(\"Ananya\", \"Burger\")\n    c.activity()\n    u.activity()"
                    ],
                    "Output": "\"Chef Vikas is preparing Pasta.\"\n    \"Customer Ananya has ordered Burger.\"",
                    "Explanation": "Both classes use the shared name attribute but define custom messages based on role and dish."
                }
            }
        ],
        "Ans": "class Person:\n    def __init__(self, name):\n        self.name = name\n\nclass Chef(Person):\n    def __init__(self, name, dish):\n        super().__init__(name)\n        self.dish = dish\n\n    def activity(self):\n        return f\"Chef {self.name} is preparing {self.dish}.\"\n\nclass Customer(Person):\n    def __init__(self, name, order):\n        super().__init__(name)\n        self.order = order\n\n    def activity(self):\n        return f\"Customer {self.name} has ordered {self.order}.\"",
        "FunctionCall": "c1 = Chef(\"Vikas\", \"Pasta\")\nassert c1.activity()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "c1 = Chef(\"Vikas\", \"Pasta\")\nassert c1.activity() "
                    ],
                    "Output": "Chef Vikas is preparing Pasta."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "u1 = Customer(\"Ananya\", \"Burger\")\nassert u1.activity() "
                    ],
                    "Output": "Customer Ananya has ordered Burger."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c2 = Chef(\"Raj\", \"\")\nassert c2.activity() "
                    ],
                    "Output": "Chef Raj is preparing ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "u2 = Customer(\"\", \"Pizza\")\nassert u2.activity() "
                    ],
                    "Output": "Customer  has ordered Pizza."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c3 = Chef(\"\", \"\")\nassert c3.activity() "
                    ],
                    "Output": "Chef  is preparing ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "c4 = Chef(\"Rohan\", \"Soup\")"
                    ],
                    "Output": "assert isinstance(c4.activity(), str)"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193306",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are developing a control system for smart devices. A base class Device holds the brand name. The VoiceControl class adds a method to activate via voice. The AppControl class adds a method to activate via mobile app. A SmartSpeaker class inherits from both VoiceControl and AppControl, and combines both methods to show how it can be controlled.",
        "Template": "class Device:\n    def __init__(self, brand):\n        pass\n\nclass VoiceControl(Device):\n    def voice_activate(self):\n        pass\n\nclass AppControl(Device):\n    def app_activate(self):\n        pass\n\nclass SmartSpeaker(VoiceControl, AppControl):\n    def control_methods(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = SmartSpeaker(\"Echo\")\n    s.control_methods()"
                    ],
                    "Output": "\"Echo can be controlled via voice and app.\"",
                    "Explanation": "The SmartSpeaker inherits from both control classes and uses both behaviors to describe its capabilities."
                }
            }
        ],
        "Ans": "class Device:\n    def __init__(self, brand):\n        self.brand = brand\n\nclass VoiceControl(Device):\n    def voice_activate(self):\n        return f\"{self.brand} can be controlled via voice\"\n\nclass AppControl(Device):\n    def app_activate(self):\n        return f\"{self.brand} can be controlled via app\"\n\nclass SmartSpeaker(VoiceControl, AppControl):\n    def __init__(self, brand):\n        super().__init__(brand)\n\n    def control_methods(self):\n        voice = self.voice_activate()\n        app = self.app_activate()\n        return f\"{self.brand} can be controlled via voice and app.\"",
        "FunctionCall": "s1 = SmartSpeaker(\"Echo\")\nassert s1.control_methods()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = SmartSpeaker(\"Echo\")\nassert s1.control_methods() "
                    ],
                    "Output": "Echo can be controlled via voice and app."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s4 = SmartSpeaker(\"\")\nassert s4.control_methods() "
                    ],
                    "Output": "can be controlled via voice and app."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s5 = SmartSpeaker(\"Mi\")"
                    ],
                    "Output": "assert hasattr(s5, \"voice_activate\")"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193306",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a college admin system. The base class Person stores a name. The Faculty class adds a subject taught. The Staff class adds a department. An Administrator class inherits from both and manages both academic and operational functions. Show the full profile of the admin.",
        "Template": "class Person:\n    def __init__(self, name):\n        pass\n\nclass Faculty(Person):\n    def __init__(self, name, subject):\n        pass\n\n    def teach(self):\n        pass\n\nclass Staff(Person):\n    def __init__(self, name, department):\n        pass\n\n    def work(self):\n        pass\n\nclass Administrator(Faculty, Staff):\n    def __init__(self, name, subject, department):\n        pass\n\n    def profile(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "admin = Administrator(\"Rakesh\", \"Math\", \"Operations\")\n    admin.profile()"
                    ],
                    "Output": "\"Rakesh teaches Math and works in Operations department.\"",
                    "Explanation": "The Administrator combines faculty and staff duties by inheriting from both."
                }
            }
        ],
        "Ans": "class Person:\n    def __init__(self, name):\n        self.name = name\n\nclass Faculty(Person):\n    def __init__(self, name, subject):\n        super().__init__(name)\n        self.subject = subject\n\n    def teach(self):\n        return f\"{self.name} teaches {self.subject}\"\n\nclass Staff(Person):\n    def __init__(self, name, department):\n        super().__init__(name)\n        self.department = department\n\n    def work(self):\n        return f\"{self.name} works in {self.department} department\"\n\nclass Administrator(Faculty, Staff):\n    def __init__(self, name, subject, department):\n        Faculty.__init__(self, name, subject)\n        Staff.__init__(self, name, department)\n\n    def profile(self):\n        return f\"{self.name} teaches {self.subject} and works in {self.department} department.\"",
        "FunctionCall": "a1 = Administrator(\"Rakesh\", \"Math\", \"Operations\")\nassert a1.profile()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "a1 = Administrator(\"Rakesh\", \"Math\", \"Operations\")\nassert a1.profile() "
                    ],
                    "Output": "Rakesh teaches Math and works in Operations department."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a3 = Administrator(\"\", \"\", \"\")\nassert a3.profile() "
                    ],
                    "Output": "teaches  and works in  department."
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193306",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing a ride booking app. A base class User stores the user name. A Driver class inherits from User and stores the car model. A Rider class also inherits from User and stores the pickup location. The Trip class inherits from both Driver and Rider and creates a trip summary.",
        "Template": "class User:\n    def __init__(self, name):\n        pass\n\nclass Driver(User):\n    def __init__(self, name, car):\n        pass\n\nclass Rider(User):\n    def __init__(self, name, pickup_location):\n        pass\n\nclass Trip(Driver, Rider):\n    def __init__(self, name, car, pickup_location):\n        pass\n\n    def summary(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "t = Trip(\"Amit\", \"Honda City\", \"Sector 21\")\n    t.summary()"
                    ],
                    "Output": "\"Amit will pick up the rider from Sector 21 using Honda City.\"",
                    "Explanation": "Trip uses details from both Driver and Rider to provide a complete trip summary."
                }
            }
        ],
        "Ans": "class User:\n    def __init__(self, name):\n        self.name = name\n\nclass Driver(User):\n    def __init__(self, name, car):\n        super().__init__(name)\n        self.car = car\n\nclass Rider(User):\n    def __init__(self, name, pickup_location):\n        super().__init__(name)\n        self.pickup_location = pickup_location\n\nclass Trip(Driver, Rider):\n    def __init__(self, name, car, pickup_location):\n        Driver.__init__(self, name, car)\n        Rider.__init__(self, name, pickup_location)\n\n    def summary(self):\n        return f\"{self.name} will pick up the rider from {self.pickup_location} using {self.car}.\"",
        "FunctionCall": "t1 = Trip(\"Amit\", \"Honda City\", \"Sector 21\")\nassert t1.summary()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "t1 = Trip(\"Amit\", \"Honda City\", \"Sector 21\")\nassert t1.summary() "
                    ],
                    "Output": "Amit will pick up the rider from Sector 21 using Honda City."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "t3 = Trip(\"\", \"\", \"\")\nassert t3.summary() "
                    ],
                    "Output": "will pick up the rider from  using ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "t5 = Trip(\"John\", \"Tesla\", \"City Center\")"
                    ],
                    "Output": "assert t5.summary().endswith(\"using Tesla.\")"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193306",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are building an e-commerce system. The base class Product stores the product name. The DigitalProduct class stores the file size. The PhysicalProduct class stores the weight. The HybridProduct inherits from both and represents a product that has both digital and physical components (like a book + audiobook combo). Return full details of the product.",
        "Template": "class Product:\n    def __init__(self, name):\n        pass\n\nclass DigitalProduct(Product):\n    def __init__(self, name, size):\n        pass\n\nclass PhysicalProduct(Product):\n    def __init__(self, name, weight):\n        pass\n\nclass HybridProduct(DigitalProduct, PhysicalProduct):\n    def __init__(self, name, size, weight):\n        pass\n\n    def details(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "hp = HybridProduct(\"Python Mastery\", \"2GB\", \"1kg\")\n    hp.details()"
                    ],
                    "Output": "\"Python Mastery includes 2GB digital files and weighs 1kg.\"",
                    "Explanation": "HybridProduct uses attributes from both digital and physical products."
                }
            }
        ],
        "Ans": "class Product:\n    def __init__(self, name):\n        self.name = name\n\nclass DigitalProduct(Product):\n    def __init__(self, name, size):\n        super().__init__(name)\n        self.size = size\n\nclass PhysicalProduct(Product):\n    def __init__(self, name, weight):\n        super().__init__(name)\n        self.weight = weight\n\nclass HybridProduct(DigitalProduct, PhysicalProduct):\n    def __init__(self, name, size, weight):\n        DigitalProduct.__init__(self, name, size)\n        PhysicalProduct.__init__(self, name, weight)\n\n    def details(self):\n        return f\"{self.name} includes {self.size} digital files and weighs {self.weight}.\"",
        "FunctionCall": "hp1 = HybridProduct(\"Python Mastery\", \"2GB\", \"1kg\")\nassert hp1.details()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "hp1 = HybridProduct(\"Python Mastery\", \"2GB\", \"1kg\")\nassert hp1.details() "
                    ],
                    "Output": "Python Mastery includes 2GB digital files and weighs 1kg."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "hp3 = HybridProduct(\"\", \"\", \"\")\nassert hp3.details() "
                    ],
                    "Output": "includes  digital files and weighs ."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "hp5 = HybridProduct(\"AI Pack\", \"5GB\", \"1.2kg\")"
                    ],
                    "Output": "assert hp5.details().endswith(\"weighs 1.2kg.\")"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250811193306",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are building a smart home integration system. The base class Appliance stores the name of the appliance. The Light class stores the brightness level. The Thermostat class stores the temperature. A SmartSystem class inherits from both and gives a status report combining both functionalities.",
        "Template": "class Appliance:\n    def __init__(self, name):\n        pass\n\nclass Light(Appliance):\n    def __init__(self, name, brightness):\n        pass\n\nclass Thermostat(Appliance):\n    def __init__(self, name, temperature):\n        pass\n\nclass SmartSystem(Light, Thermostat):\n    def __init__(self, name, brightness, temperature):\n        pass\n\n    def status(self):\n        pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = SmartSystem(\"Living Room\", \"75%\", \"24°C\")\n    s.status()"
                    ],
                    "Output": "\"Living Room system: Light at 75%, Temperature set to 24°C.\"",
                    "Explanation": "The SmartSystem pulls brightness from Light and temperature from Thermostat."
                }
            }
        ],
        "Ans": "class Appliance:\n    def __init__(self, name):\n        self.name = name\n\nclass Light(Appliance):\n    def __init__(self, name, brightness):\n        super().__init__(name)\n        self.brightness = brightness\n\nclass Thermostat(Appliance):\n    def __init__(self, name, temperature):\n        super().__init__(name)\n        self.temperature = temperature\n\nclass SmartSystem(Light, Thermostat):\n    def __init__(self, name, brightness, temperature):\n        Light.__init__(self, name, brightness)\n        Thermostat.__init__(self, name, temperature)\n\n    def status(self):\n        return f\"{self.name} system: Light at {self.brightness}, Temperature set to {self.temperature}.\"",
        "FunctionCall": "s1 = SmartSystem(\"Living Room\", \"75%\", \"24°C\")\nassert s1.status()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "s1 = SmartSystem(\"Living Room\", \"75%\", \"24°C\")\nassert s1.status() "
                    ],
                    "Output": "Living Room system: Light at 75%, Temperature set to 24°C."
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "s3 = SmartSystem(\"\", \"\", \"\")\nassert s3.status() "
                    ],
                    "Output": "system: Light at , Temperature set to ."
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing a modular architecture design system where different types of windows (square and rectangular) are modeled using object-oriented principles.\nYou are to design an abstract class Window that defines a method calculate_area(). Then, implement two concrete classes:\n  SquareWindow – takes a single side length.\n  RectangleWindow – takes length and width.\n  Both should inherit from Window and override calculate_area() accordingly.",
        "Template": "from abc import ABC, abstractmethod\n\nclass Window(ABC):\n    @abstractmethod\n    def calculate_area(self):\n        pass\n\nclass SquareWindow(Window):\n    def __init__(self, side):\n        self.side = side\n\nclass RectangleWindow(Window):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "sq = SquareWindow(6)\n  rc = RectangleWindow(3, 9)\n  print(sq.calculate_area())\n  print(rc.calculate_area())"
                    ],
                    "Output": "36\n  27",
                    "Explanation": "The square window has side length 6 → Area = 6 × 6 = 36\n  The rectangular window has dimensions 3 × 9 → Area = 3 × 9 = 27"
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Window(ABC):\n    @abstractmethod\n    def calculate_area(self):\n        pass\n\nclass SquareWindow(Window):\n    def __init__(self, side):\n        self.side = side\n\n    def calculate_area(self):\n        return self.side * self.side\n\nclass RectangleWindow(Window):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def calculate_area(self):\n        return self.length * self.width",
        "FunctionCall": "sq = SquareWindow(6)\nrc = RectangleWindow(3, 9)\nprint(sq.calculate_area())\nprint(rc.calculate_area())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(SquareWindow(3).calculate_area())            "
                    ],
                    "Output": "9"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(RectangleWindow(10, 2).calculate_area())     "
                    ],
                    "Output": "20"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(SquareWindow(0).calculate_area())            "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(RectangleWindow(0, 5).calculate_area())      "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(RectangleWindow(7, 1).calculate_area())      "
                    ],
                    "Output": "7"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(SquareWindow(12).calculate_area())           "
                    ],
                    "Output": "144"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(RectangleWindow(5, 5).calculate_area())      "
                    ],
                    "Output": "25"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(RectangleWindow(100, 0).calculate_area())    "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(SquareWindow(1).calculate_area())            "
                    ],
                    "Output": "1"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a geometry toolkit for civil engineers. The toolkit must handle different shapes uniformly using object-oriented design.\n\nYou need to implement an abstract class Shape with an abstract method calculate_area(). Then, define concrete subclasses for:\n  Square → accepts one side length.\n  Rectangle → accepts length and width.\n  Circle → accepts the radius.\n  Each subclass should implement its own version of calculate_area().\n\nUse Python’s abc module to enforce the abstraction.",
        "Template": "from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def calculate_area(self):\n        pass\n\nclass Square(Shape):\n    def __init__(self, side):\n        self.side = side\n\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "s = Square(4)\n  r = Rectangle(3, 5)\n  c = Circle(7)\n  print(s.calculate_area())\n  print(r.calculate_area())\n  print(c.calculate_area())"
                    ],
                    "Output": "16\n  15\n  153.93804002589985",
                    "Explanation": "Square: 4 × 4 = 16\n  Rectangle: 3 × 5 = 15\n  Circle: π × r² → 3.14159 × 7² = 153.938..."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\nimport math\n\nclass Shape(ABC):\n    @abstractmethod\n    def calculate_area(self):\n        pass\n\nclass Square(Shape):\n    def __init__(self, side):\n        self.side = side\n\n    def calculate_area(self):\n        return self.side * self.side\n\nclass Rectangle(Shape):\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n\n    def calculate_area(self):\n        return self.length * self.width\n\nclass Circle(Shape):\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculate_area(self):\n        return math.pi * self.radius ** 2",
        "FunctionCall": "s = Square(4)\nr = Rectangle(3, 5)\nc = Circle(7)\nprint(s.calculate_area())\nprint(r.calculate_area())\nprint(c.calculate_area())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Square(3).calculate_area())           "
                    ],
                    "Output": "9"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Rectangle(4, 6).calculate_area())     "
                    ],
                    "Output": "24"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Circle(1).calculate_area())           "
                    ],
                    "Output": "3.141592653589793"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Square(0).calculate_area())           "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Rectangle(0, 10).calculate_area())    "
                    ],
                    "Output": "0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Circle(0).calculate_area())           "
                    ],
                    "Output": "0.0"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Rectangle(5, 5).calculate_area())     "
                    ],
                    "Output": "25"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Square(7).calculate_area())           "
                    ],
                    "Output": "49"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Circle(3.5).calculate_area())         "
                    ],
                    "Output": "38.48451000647496"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are developing a digital payment system that supports multiple payment methods such as credit cards and UPI (Unified Payments Interface). Each payment method should implement its own way to process payments.\n\nDefine an abstract class PaymentMethod with an abstract method pay(amount). Then implement two subclasses:\n  CreditCard – returns \"Paid {amount} using Credit Card\"\n  UPI – returns \"Paid {amount} using UPI\"\n  This allows future extensions for other payment methods while maintaining consistency.",
        "Template": "from abc import ABC, abstractmethod\n\nclass PaymentMethod(ABC):\n    @abstractmethod\n    def pay(self, amount):\n        pass\n\nclass CreditCard(PaymentMethod):\n    pass\n\nclass UPI(PaymentMethod):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "cc = CreditCard()\n  upi = UPI()\n  print(cc.pay(1500))\n  print(upi.pay(500))"
                    ],
                    "Output": "Paid 1500 using Credit Card\n  Paid 500 using UPI",
                    "Explanation": "CreditCard processes the amount and returns a custom string indicating the method and amount.\n  Same with UPI, but for a different method."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass PaymentMethod(ABC):\n    @abstractmethod\n    def pay(self, amount):\n        pass\n\nclass CreditCard(PaymentMethod):\n    def pay(self, amount):\n        return f\"Paid {amount} using Credit Card\"\n\nclass UPI(PaymentMethod):\n    def pay(self, amount):\n        return f\"Paid {amount} using UPI\"",
        "FunctionCall": "cc = CreditCard()\nupi = UPI()\nprint(cc.pay(1500))\nprint(upi.pay(500))",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(CreditCard().pay(1500))       "
                    ],
                    "Output": "Paid 1500 using Credit Card"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(UPI().pay(500))               "
                    ],
                    "Output": "Paid 500 using UPI"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(CreditCard().pay(0))          "
                    ],
                    "Output": "Paid 0 using Credit Card"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(UPI().pay(99999))             "
                    ],
                    "Output": "Paid 99999 using UPI"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(CreditCard().pay(100.50))     "
                    ],
                    "Output": "Paid 100.5 using Credit Card"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(UPI().pay(12.75))             "
                    ],
                    "Output": "Paid 12.75 using UPI"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(CreditCard().pay(1))          "
                    ],
                    "Output": "Paid 1 using Credit Card"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(UPI().pay(250))               "
                    ],
                    "Output": "Paid 250 using UPI"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(CreditCard().pay(1000000))    "
                    ],
                    "Output": "Paid 1000000 using Credit Card"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're working on a traffic simulation system for a smart city project. Different vehicle types must implement their own logic to report speed.\nCreate an abstract class Vehicle with an abstract method get_speed().\n\nThen implement two vehicle types:\n  Car → initialized with speed, returns \"Car is moving at {speed} km/h\"\n  Bike → initialized with speed, returns \"Bike is moving at {speed} km/h\"\n\nThis allows consistent vehicle behavior handling while respecting their differences.",
        "Template": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def get_speed(self):\n        pass\n\nclass Car(Vehicle):\n    def __init__(self, speed):\n        self.speed = speed\n\nclass Bike(Vehicle):\n    def __init__(self, speed):\n        self.speed = speed",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = Car(80)\n  b = Bike(40)\n  print(c.get_speed())\n  print(b.get_speed())"
                    ],
                    "Output": "Car is moving at 80 km/h\n  Bike is moving at 40 km/h",
                    "Explanation": "The Car object stores a speed of 80 and returns the formatted message.\n  The Bike object stores a speed of 40 and does the same for bikes."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def get_speed(self):\n        pass\n\nclass Car(Vehicle):\n    def __init__(self, speed):\n        self.speed = speed\n\n    def get_speed(self):\n        return f\"Car is moving at {self.speed} km/h\"\n\nclass Bike(Vehicle):\n    def __init__(self, speed):\n        self.speed = speed\n\n    def get_speed(self):\n        return f\"Bike is moving at {self.speed} km/h\"",
        "FunctionCall": "c = Car(80)\nb = Bike(40)\nprint(c.get_speed())\nprint(b.get_speed())",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Car(80).get_speed())           "
                    ],
                    "Output": "Car is moving at 80 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Bike(40).get_speed())          "
                    ],
                    "Output": "Bike is moving at 40 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Car(0).get_speed())            "
                    ],
                    "Output": "Car is moving at 0 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Bike(0).get_speed())           "
                    ],
                    "Output": "Bike is moving at 0 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Car(120).get_speed())          "
                    ],
                    "Output": "Car is moving at 120 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Bike(25).get_speed())          "
                    ],
                    "Output": "Bike is moving at 25 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Car(55.5).get_speed())         "
                    ],
                    "Output": "Car is moving at 55.5 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Bike(19.8).get_speed())        "
                    ],
                    "Output": "Bike is moving at 19.8 km/h"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "print(Car(200).get_speed())          "
                    ],
                    "Output": "Car is moving at 200 km/h"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are developing software for a robot manufacturing company. Each robot has a method called perform_task(), but the type of task depends on the robot type. There are two kinds of robots:\n  CleaningRobot: performs cleaning tasks.\n  DeliveryRobot: performs delivery tasks.\n\nDesign an abstract base class Robot with the abstract method perform_task. Each subclass should implement its version of the method.",
        "Template": "from abc import ABC, abstractmethod\n\nclass Robot(ABC):\n    @abstractmethod\n    def perform_task(self):\n        pass\n\nclass CleaningRobot(Robot):\n    pass\n\nclass DeliveryRobot(Robot):\n    pass\n\n# Test\nr1 = CleaningRobot()\nr2 = DeliveryRobot()\nprint(r1.perform_task())\nprint(r2.perform_task())",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "r1 = CleaningRobot()\n  r2 = DeliveryRobot()\n  print(r1.perform_task())\n  print(r2.perform_task())"
                    ],
                    "Output": "Cleaning in progress\n  Delivering items",
                    "Explanation": "Each robot subclass implements perform_task according to its type."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Robot(ABC):\n    @abstractmethod\n    def perform_task(self):\n        pass\n\nclass CleaningRobot(Robot):\n    def perform_task(self):\n        return \"Cleaning in progress\"\n\nclass DeliveryRobot(Robot):\n    def perform_task(self):\n        return \"Delivering items\"\n\n# Test\nr1 = CleaningRobot()\nr2 = DeliveryRobot()\nprint(r1.perform_task())\nprint(r2.perform_task())",
        "FunctionCall": "r1 = CleaningRobot()\nassert r1.perform_task()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "r1 = CleaningRobot()\nassert r1.perform_task() "
                    ],
                    "Output": "Cleaning in progress"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "r2 = DeliveryRobot()\nassert r2.perform_task() "
                    ],
                    "Output": "Delivering items"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "r3 = CleaningRobot()\nassert isinstance(r3, Robot) "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "r4 = DeliveryRobot()\nassert isinstance(r4, Robot) "
                    ],
                    "Output": "True"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "robots = [CleaningRobot(), DeliveryRobot()]"
                    ],
                    "Output": "results = [r.perform_task() for r in robots]\nassert results # Expected: [\"Cleaning in progress\", \"Delivering items\"]"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are building an HR system that models different employee roles. Create an abstract class Employee with an abstract method get_role().\nSubclasses should implement this method:\n    Manager: returns \"Manages the team\"\n    Developer: returns \"Writes code\"",
        "Template": "from abc import ABC, abstractmethod\n\nclass Employee(ABC):\n    @abstractmethod\n    def get_role(self):\n        pass\n\nclass Manager(Employee):\n    pass\n\nclass Developer(Employee):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "e1 = Manager()\n    e2 = Developer()\n    print(e1.get_role())\n    print(e2.get_role())"
                    ],
                    "Output": "Manages the team\n    Writes code",
                    "Explanation": "Each subclass provides its own role using the abstract method get_role()."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Employee(ABC):\n    @abstractmethod\n    def get_role(self):\n        pass\n\nclass Manager(Employee):\n    def get_role(self):\n        return \"Manages the team\"\n\nclass Developer(Employee):\n    def get_role(self):\n        return \"Writes code\"",
        "FunctionCall": "e1 = Manager()\nassert e1.get_role()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "e1 = Manager()\nassert e1.get_role() "
                    ],
                    "Output": "Manages the team"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "e2 = Developer()\nassert e2.get_role() "
                    ],
                    "Output": "Writes code"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are designing a vehicle simulation. Create an abstract class Vehicle with an abstract method engine_type().\nSubclasses:\n    Car: returns \"Petrol Engine\"\n    Truck: returns \"Diesel Engine\"",
        "Template": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def engine_type(self):\n        pass\n\nclass Car(Vehicle):\n    pass\n\nclass Truck(Vehicle):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "v1 = Car()\n    v2 = Truck()\n    print(v1.engine_type())\n    print(v2.engine_type())"
                    ],
                    "Output": "Petrol Engine\n    Diesel Engine",
                    "Explanation": "Each subclass defines what kind of engine it uses."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Vehicle(ABC):\n    @abstractmethod\n    def engine_type(self):\n        pass\n\nclass Car(Vehicle):\n    def engine_type(self):\n        return \"Petrol Engine\"\n\nclass Truck(Vehicle):\n    def engine_type(self):\n        return \"Diesel Engine\"",
        "FunctionCall": "v1 = Car()\nassert v1.engine_type()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "v1 = Car()\nassert v1.engine_type() "
                    ],
                    "Output": "Petrol Engine"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "v2 = Truck()\nassert v2.engine_type() "
                    ],
                    "Output": "Diesel Engine"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are simulating an animal zoo. Create an abstract class Animal with an abstract method make_sound().\nSubclasses:\n    Dog: returns \"Bark\"\n    Cat: returns \"Meow\"",
        "Template": "from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def make_sound(self):\n        pass\n\nclass Dog(Animal):\n    pass\n\nclass Cat(Animal):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "a1 = Dog()\n    a2 = Cat()\n    print(a1.make_sound())\n    print(a2.make_sound())"
                    ],
                    "Output": "Bark\n    Meow",
                    "Explanation": "Each animal subclass implements the sound it makes."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def make_sound(self):\n        pass\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Bark\"\n\nclass Cat(Animal):\n    def make_sound(self):\n        return \"Meow\"",
        "FunctionCall": "a1 = Dog()\nassert a1.make_sound()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "a1 = Dog()\nassert a1.make_sound() "
                    ],
                    "Output": "Bark"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "a2 = Cat()\nassert a2.make_sound() "
                    ],
                    "Output": "Meow"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a document converter. Create an abstract class Document with an abstract method convert().\nSubclasses:\n    PDFDocument: returns \"Converted to PDF\"\n    WordDocument: returns \"Converted to Word\"",
        "Template": "from abc import ABC, abstractmethod\n\nclass Document(ABC):\n    @abstractmethod\n    def convert(self):\n        pass\n\nclass PDFDocument(Document):\n    pass\n\nclass WordDocument(Document):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "d1 = PDFDocument()\n    d2 = WordDocument()\n    print(d1.convert())\n    print(d2.convert())"
                    ],
                    "Output": "Converted to PDF\n    Converted to Word",
                    "Explanation": "Each document class defines how it gets converted."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Document(ABC):\n    @abstractmethod\n    def convert(self):\n        pass\n\nclass PDFDocument(Document):\n    def convert(self):\n        return \"Converted to PDF\"\n\nclass WordDocument(Document):\n    def convert(self):\n        return \"Converted to Word\"",
        "FunctionCall": "d1 = PDFDocument()\nassert d1.convert()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "d1 = PDFDocument()\nassert d1.convert() "
                    ],
                    "Output": "Converted to PDF"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "d2 = WordDocument()\nassert d2.convert() "
                    ],
                    "Output": "Converted to Word"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164502",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a system that sends notifications through different channels.\nCreate an abstract class Notification with an abstract method send(msg).\nSubclasses:\n    EmailNotification: returns \"Email sent: {msg}\"\n    SMSNotification: returns \"SMS sent: {msg}\"",
        "Template": "from abc import ABC, abstractmethod\n\nclass Notification(ABC):\n    @abstractmethod\n    def send(self, msg):\n        pass\n\nclass EmailNotification(Notification):\n    pass\n\nclass SMSNotification(Notification):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "n1 = EmailNotification()\n    n2 = SMSNotification()\n    print(n1.send(\"Meeting at 5\"))\n    print(n2.send(\"OTP 1234\"))"
                    ],
                    "Output": "Email sent: Meeting at 5\n    SMS sent: OTP 1234",
                    "Explanation": "Each subclass sends the message in its own way."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Notification(ABC):\n    @abstractmethod\n    def send(self, msg):\n        pass\n\nclass EmailNotification(Notification):\n    def send(self, msg):\n        return f\"Email sent: {msg}\"\n\nclass SMSNotification(Notification):\n    def send(self, msg):\n        return f\"SMS sent: {msg}\"",
        "FunctionCall": "n1 = EmailNotification()\nassert n1.send(\"Meeting\")",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "n1 = EmailNotification()\nassert n1.send(\"Meeting\") "
                    ],
                    "Output": "Email sent: Meeting"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "n2 = SMSNotification()\nassert n2.send(\"OTP 1111\") "
                    ],
                    "Output": "SMS sent: OTP 1111"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164503",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're building a smart home system that can control various devices like lights, fans, and air conditioners. To ensure all devices can be controlled in the same way, you define an interface ControllableDevice with a method turn_on().\n\nEach device class that implements this interface must define how it turns on:\n    SmartLight returns \"Smart Light is now ON\"\n    SmartFan returns \"Smart Fan is now ON\"\n\nThis design allows a central controller to activate any smart device without knowing its internal logic.",
        "Template": "from abc import ABC, abstractmethod\n\nclass ControllableDevice(ABC):\n    @abstractmethod\n    def turn_on(self):\n        pass\n\nclass SmartLight(ControllableDevice):\n    pass\n\nclass SmartFan(ControllableDevice):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "light = SmartLight()\n    fan = SmartFan()\n    print(light.turn_on())\n    print(fan.turn_on())"
                    ],
                    "Output": "Smart Light is now ON\n    Smart Fan is now ON",
                    "Explanation": "Both devices implement the same interface method and provide their specific behavior."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass ControllableDevice(ABC):\n    @abstractmethod\n    def turn_on(self):\n        pass\n\nclass SmartLight(ControllableDevice):\n    def turn_on(self):\n        return \"Smart Light is now ON\"\n\nclass SmartFan(ControllableDevice):\n    def turn_on(self):\n        return \"Smart Fan is now ON\"",
        "FunctionCall": "light = SmartLight()\nassert light.turn_on()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "light = SmartLight()\nassert light.turn_on() "
                    ],
                    "Output": "Smart Light is now ON"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "fan = SmartFan()\nassert fan.turn_on() "
                    ],
                    "Output": "Smart Fan is now ON"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "devices = [SmartLight(), SmartFan()]"
                    ],
                    "Output": "assert [d.turn_on() for d in devices] # Expected: [\"Smart Light is now ON\", \"Smart Fan is now ON\"]"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164503",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing an e-commerce platform that accepts payments through multiple providers.\nTo ensure each provider implements the correct process, define an interface PaymentGateway with a method pay(amount).\n\nThe classes:\n    StripePayment: returns \"Paid ₹{amount} using Stripe\"\n    PaytmPayment: returns \"Paid ₹{amount} using Paytm\"\n\nThis lets your app treat all payment gateways uniformly.",
        "Template": "from abc import ABC, abstractmethod\n\nclass PaymentGateway(ABC):\n    @abstractmethod\n    def pay(self, amount):\n        pass\n\nclass StripePayment(PaymentGateway):\n    pass\n\nclass PaytmPayment(PaymentGateway):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "stripe = StripePayment()\n    paytm = PaytmPayment()\n    print(stripe.pay(250))\n    print(paytm.pay(500))"
                    ],
                    "Output": "Paid ₹250 using Stripe\n    Paid ₹500 using Paytm",
                    "Explanation": "Each class implements pay with its own logic while conforming to the same interface."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass PaymentGateway(ABC):\n    @abstractmethod\n    def pay(self, amount):\n        pass\n\nclass StripePayment(PaymentGateway):\n    def pay(self, amount):\n        return f\"Paid ₹{amount} using Stripe\"\n\nclass PaytmPayment(PaymentGateway):\n    def pay(self, amount):\n        return f\"Paid ₹{amount} using Paytm\"",
        "FunctionCall": "stripe = StripePayment()\nassert stripe.pay(100)",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "stripe = StripePayment()\nassert stripe.pay(100) "
                    ],
                    "Output": "Paid ₹100 using Stripe"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "paytm = PaytmPayment()\nassert paytm.pay(350) "
                    ],
                    "Output": "Paid ₹350 using Paytm"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "methods = [StripePayment(), PaytmPayment()]"
                    ],
                    "Output": "assert [m.pay(1) for m in methods] # Expected: [\"Paid ₹1 using Stripe\", \"Paid ₹1 using Paytm\"]"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164503",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You are building a print management system for a shared office. Different types of documents—PDFs and images—need to be printed, but in different ways. To handle this uniformly, define an interface Printable with a method print_content().\n\nClasses that implement this interface:\n    PDFDocument: returns \"Printing PDF Document\"\n    ImageFile: returns \"Printing Image File\"\n\nThis allows your system to treat all printable items the same way while letting each define its own logic.",
        "Template": "from abc import ABC, abstractmethod\n\nclass Printable(ABC):\n    @abstractmethod\n    def print_content(self):\n        pass\n\nclass PDFDocument(Printable):\n    pass\n\nclass ImageFile(Printable):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "pdf = PDFDocument()\n    img = ImageFile()\n    print(pdf.print_content())\n    print(img.print_content())"
                    ],
                    "Output": "Printing PDF Document\n    Printing Image File",
                    "Explanation": "Both classes implement print_content() but provide their own context-specific response."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Printable(ABC):\n    @abstractmethod\n    def print_content(self):\n        pass\n\nclass PDFDocument(Printable):\n    def print_content(self):\n        return \"Printing PDF Document\"\n\nclass ImageFile(Printable):\n    def print_content(self):\n        return \"Printing Image File\"",
        "FunctionCall": "pdf = PDFDocument()\nassert pdf.print_content()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "pdf = PDFDocument()\nassert pdf.print_content() "
                    ],
                    "Output": "Printing PDF Document"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "img = ImageFile()\nassert img.print_content() "
                    ],
                    "Output": "Printing Image File"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "docs = [PDFDocument(), ImageFile()]"
                    ],
                    "Output": "assert [d.print_content() for d in docs] # Expected: [\"Printing PDF Document\", \"Printing Image File\"]"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164503",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're simulating traffic for a video game. All vehicles must define how they move. To enforce consistency, define an interface Movable with a method move().\n\nImplement the following classes:\n    Car: returns \"Car is driving\"\n    Bike: returns \"Bike is riding\"\n\nBy using a common interface, your game engine can move all vehicles without knowing what kind they are.",
        "Template": "from abc import ABC, abstractmethod\n\nclass Movable(ABC):\n    @abstractmethod\n    def move(self):\n        pass\n\nclass Car(Movable):\n    pass\n\nclass Bike(Movable):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "c = Car()\n    b = Bike()\n    print(c.move())\n    print(b.move())"
                    ],
                    "Output": "Car is driving\n    Bike is riding",
                    "Explanation": "The move method is implemented differently depending on the vehicle type."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Movable(ABC):\n    @abstractmethod\n    def move(self):\n        pass\n\nclass Car(Movable):\n    def move(self):\n        return \"Car is driving\"\n\nclass Bike(Movable):\n    def move(self):\n        return \"Bike is riding\"",
        "FunctionCall": "c = Car()\nassert c.move()",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "c = Car()\nassert c.move() "
                    ],
                    "Output": "Car is driving"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "b = Bike()\nassert b.move() "
                    ],
                    "Output": "Bike is riding"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "vehicles = [Car(), Bike()]"
                    ],
                    "Output": "assert [v.move() for v in vehicles] # Expected: [\"Car is driving\", \"Bike is riding\"]"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    },
    {
        "Name": "Python Programming",
        "QNty": "Python",
        "CreatedON": "18-08-2025 12:05:26",
        "QnTy": "code",
        "MultiSelect": "0",
        "QnTe": "MC9.htm",
        "CreatedBy": "system@example.com",
        "ConceptID": "py250816164503",
        "Level": "Easy",
        "Tags": [],
        "QuestionType": "Exercise",
        "Qn": "You're developing a login system that supports multiple authentication providers. To ensure all providers follow the same contract, define an interface Authenticator with the method authenticate(user).\nProviders:\n    EmailAuthenticator: returns \"User {user} authenticated via Email\"\n    GoogleAuthenticator: returns \"User {user} authenticated via Google\"\n\nThis interface allows the authentication module to work with any future login method.",
        "Template": "from abc import ABC, abstractmethod\n\nclass Authenticator(ABC):\n    @abstractmethod\n    def authenticate(self, user):\n        pass\n\nclass EmailAuthenticator(Authenticator):\n    pass\n\nclass GoogleAuthenticator(Authenticator):\n    pass",
        "Examples": [
            {
                "Example": {
                    "Inputs": [
                        "email = EmailAuthenticator()\n    google = GoogleAuthenticator()\n    print(email.authenticate(\"Akhil\"))\n    print(google.authenticate(\"Riya\"))"
                    ],
                    "Output": "User Akhil authenticated via Email\n    User Riya authenticated via Google",
                    "Explanation": "Both classes implement the same method but return provider-specific messages."
                }
            }
        ],
        "Ans": "from abc import ABC, abstractmethod\n\nclass Authenticator(ABC):\n    @abstractmethod\n    def authenticate(self, user):\n        pass\n\nclass EmailAuthenticator(Authenticator):\n    def authenticate(self, user):\n        return f\"User {user} authenticated via Email\"\n\nclass GoogleAuthenticator(Authenticator):\n    def authenticate(self, user):\n        return f\"User {user} authenticated via Google\"",
        "FunctionCall": "email = EmailAuthenticator()\nassert email.authenticate(\"Akhil\")",
        "TestCases": [
            {
                "Testcase": [
                    "",
                    ""
                ]
            },
            {
                "Testcase": {
                    "Value": [
                        "email = EmailAuthenticator()\nassert email.authenticate(\"Akhil\") "
                    ],
                    "Output": "User Akhil authenticated via Email"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "google = GoogleAuthenticator()\nassert google.authenticate(\"Riya\") "
                    ],
                    "Output": "User Riya authenticated via Google"
                }
            },
            {
                "Testcase": {
                    "Value": [
                        "providers = [EmailAuthenticator(), GoogleAuthenticator()]"
                    ],
                    "Output": "results = [p.authenticate(\"UserX\") for p in providers]\nassert results # Expected: [\n\"User UserX authenticated via Email\",\n\"User UserX authenticated via Google\"\n]"
                }
            }
        ],
        "Explanations": [],
        "Hints": [],
        "currentFile": "",
        "LastUpdated": "18-08-2025 12:05:26",
        "Query": "",
        "Table": ""
    }
]